
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "BINARY COMPARATOR FL HEXADECIMAL INTEGER NULL OCTAL REAL SCIENTIFIC STRING_EXPLICIT STRING_IMPLICIT TR\n        file : object\n            | empty\n        \n        object : '{' object_content '}'\n        \n        object_content : object_entry ',' object_content\n            | object_entry\n            | empty\n        \n        object_entry : key ':' value\n        \n        key : STRING_EXPLICIT\n            | STRING_IMPLICIT\n        \n        value : array\n            | object\n            | comparison\n            | number\n            | TR\n            | FL\n            | NULL\n            | STRING_EXPLICIT\n        \n        array : '[' array_content ']'\n        \n        array_content : object ',' array_content\n            | object\n            | empty\n        \n        comparison : number COMPARATOR number\n        \n        number : SCIENTIFIC\n            | REAL\n            | HEXADECIMAL\n            | OCTAL\n            | BINARY\n            | INTEGER\n        \n        empty :\n        "
    
_lr_action_items = {'{':([0,13,24,37,],[4,4,4,4,]),'$end':([0,1,2,3,11,],[-29,0,-1,-2,-3,]),'}':([4,5,6,7,11,12,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,35,36,],[-29,11,-5,-6,-3,-29,-4,-7,-10,-11,-12,-13,-14,-15,-16,-17,-23,-24,-25,-26,-27,-28,-22,-18,]),'STRING_EXPLICIT':([4,12,13,],[9,9,23,]),'STRING_IMPLICIT':([4,12,],[10,10,]),',':([6,11,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,33,35,36,],[12,-3,-7,-10,-11,-12,-13,-14,-15,-16,-17,-23,-24,-25,-26,-27,-28,37,-22,-18,]),':':([8,9,10,],[13,-8,-9,]),']':([11,24,32,33,34,37,38,],[-3,-29,36,-20,-21,-29,-19,]),'TR':([13,],[20,]),'FL':([13,],[21,]),'NULL':([13,],[22,]),'[':([13,],[24,]),'SCIENTIFIC':([13,31,],[25,25,]),'REAL':([13,31,],[26,26,]),'HEXADECIMAL':([13,31,],[27,27,]),'OCTAL':([13,31,],[28,28,]),'BINARY':([13,31,],[29,29,]),'INTEGER':([13,31,],[30,30,]),'COMPARATOR':([19,25,26,27,28,29,30,],[31,-23,-24,-25,-26,-27,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'object':([0,13,24,37,],[2,17,33,33,]),'empty':([0,4,12,24,37,],[3,7,7,34,34,]),'object_content':([4,12,],[5,14,]),'object_entry':([4,12,],[6,6,]),'key':([4,12,],[8,8,]),'value':([13,],[15,]),'array':([13,],[16,]),'comparison':([13,],[18,]),'number':([13,31,],[19,35,]),'array_content':([24,37,],[32,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> object','file',1,'p_file','ajson_parser.py',14),
  ('file -> empty','file',1,'p_file','ajson_parser.py',15),
  ('object -> { object_content }','object',3,'p_object','ajson_parser.py',21),
  ('object_content -> object_entry , object_content','object_content',3,'p_object_content','ajson_parser.py',27),
  ('object_content -> object_entry','object_content',1,'p_object_content','ajson_parser.py',28),
  ('object_content -> empty','object_content',1,'p_object_content','ajson_parser.py',29),
  ('object_entry -> key : value','object_entry',3,'p_object_entry','ajson_parser.py',37),
  ('key -> STRING_EXPLICIT','key',1,'p_key','ajson_parser.py',43),
  ('key -> STRING_IMPLICIT','key',1,'p_key','ajson_parser.py',44),
  ('value -> array','value',1,'p_value','ajson_parser.py',50),
  ('value -> object','value',1,'p_value','ajson_parser.py',51),
  ('value -> comparison','value',1,'p_value','ajson_parser.py',52),
  ('value -> number','value',1,'p_value','ajson_parser.py',53),
  ('value -> TR','value',1,'p_value','ajson_parser.py',54),
  ('value -> FL','value',1,'p_value','ajson_parser.py',55),
  ('value -> NULL','value',1,'p_value','ajson_parser.py',56),
  ('value -> STRING_EXPLICIT','value',1,'p_value','ajson_parser.py',57),
  ('array -> [ array_content ]','array',3,'p_array','ajson_parser.py',63),
  ('array_content -> object , array_content','array_content',3,'p_array_content','ajson_parser.py',69),
  ('array_content -> object','array_content',1,'p_array_content','ajson_parser.py',70),
  ('array_content -> empty','array_content',1,'p_array_content','ajson_parser.py',71),
  ('comparison -> number COMPARATOR number','comparison',3,'p_comparison','ajson_parser.py',82),
  ('number -> SCIENTIFIC','number',1,'p_number','ajson_parser.py',88),
  ('number -> REAL','number',1,'p_number','ajson_parser.py',89),
  ('number -> HEXADECIMAL','number',1,'p_number','ajson_parser.py',90),
  ('number -> OCTAL','number',1,'p_number','ajson_parser.py',91),
  ('number -> BINARY','number',1,'p_number','ajson_parser.py',92),
  ('number -> INTEGER','number',1,'p_number','ajson_parser.py',93),
  ('empty -> <empty>','empty',0,'p_empty','ajson_parser.py',102),
]
