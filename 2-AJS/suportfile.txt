def p_expression(self, p):
        """
        expression : expression binary_operator expression
            | unary_operator expression
            | term
        """
        if len(p) == 4:
            if (p[1] is not a or p[3] is not b):
                error
            p[0] = p[2](p[1], p[3])
        elif len(p) == 3:
            p[0] = p[2]
        else:
            p[0] = p[1]
    
    def p_binary_operator(self, p):
        """
        binary_operator : expression binary_operator expression
            | unary_operator expression
        """
        p[0] = p[1]





    def p_operator(self, p):
        """
        operator : logic_operator
            | math_operator
        """
        p[0] = p[1]
    
    def p_logic_operator(self, p):
        """
        logic_operator : unary_operator
            | binary_operator
        """
        p[0] = p[1]




    def p_expression(self, p):
        """
        expression : expression ARITHMETIC term
            | term
        """
        if len(p) == 4:
            if p[2] == '+':
                p[0] = p[1] + p[3]
            elif p[2] == '-':
                p[0] = p[1] - p[3]
        else:
            p[0] = p[1]

    def p_term(self, p):
        """
        term : term ARITHMETIC factor
            | factor
        """
        if len(p) == 4:
            if p[2] == '*':
                p[0] = p[1] * p[3]
            elif p[2] == '/':
                p[0] = p[1] / p[3]
        else:
            p[0] = p[1]

    def p_factor(self, p):
        """
        factor : INTEGER
            | REAL
            | '(' expression ')'
        """
        if len(p) == 2:
            p[0] = p[1]
        else:
            p[0] = p[2]
            
            








def p_object(self, p):
        """
        object : '{' object_content '}'
        """
        p[0] = p[2]

    def p_object_content(self, p):
        """
        object_content : object_entry ',' object_content
            | object_entry
            | empty
        """
        p[0] = None if p[1] is None else dict([p[1]])
        if len(p) == 4 and p[3] is not None:
            p[0].update(p[3])

    def p_object_entry(self, p):
        """
        object_entry : key ':' type
        """
        p[0] = (p[1], p[3])

    def p_key(self, p):
        """
        key : STRING_EXPLICIT
            | STRING_IMPLICIT
        """
        p[0] = p[1]

    def p_type(self, p):
        """
        value : object
            | comparison
            | number
            | TR
            | FL
            | NULL
            | STRING_EXPLICIT
        """
        p[0] = p[1]

    def p_comparison(self, p):
        """
        comparison : number COMPARATOR number
        """
        p[0] = eval(f"{p[1]} {p[2]} {p[3]}")
