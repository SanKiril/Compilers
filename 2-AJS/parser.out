Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> file
Rule 1     file -> statement file
Rule 2     file -> block file
Rule 3     file -> empty
Rule 4     statement -> declaration ;
Rule 5     statement -> assignment ;
Rule 6     statement -> definition ;
Rule 7     statement -> basic_expression ;
Rule 8     block -> simple_block
Rule 9     block -> function
Rule 10    simple_block -> if_conditional
Rule 11    simple_block -> while_loop
Rule 12    block_body -> block_body_nonempty
Rule 13    block_body -> empty
Rule 14    block_body_nonempty -> statement block_body_nonempty
Rule 15    block_body_nonempty -> simple_block block_body_nonempty
Rule 16    block_body_nonempty -> statement
Rule 17    block_body_nonempty -> simple_block
Rule 18    declaration -> LET declaration_content
Rule 19    declaration_content -> item , declaration_content
Rule 20    declaration_content -> item
Rule 21    item -> STRING_IMPLICIT : STRING_IMPLICIT
Rule 22    item -> STRING_IMPLICIT
Rule 23    assignment -> declaration ASSIGN expression
Rule 24    assignment -> STRING_IMPLICIT ASSIGN expression
Rule 25    expression -> basic_expression
Rule 26    expression -> object
Rule 27    definition -> TYPE STRING_IMPLICIT ASSIGN object
Rule 28    object -> { object_content }
Rule 29    object_content -> object_item , object_content
Rule 30    object_content -> object_item
Rule 31    object_content -> empty
Rule 32    object_item -> key : basic_type
Rule 33    object_item -> key : basic_expression
Rule 34    key -> STRING_EXPLICIT
Rule 35    key -> STRING_IMPLICIT
Rule 36    type -> basic_type
Rule 37    type -> STRING_IMPLICIT
Rule 38    basic_type -> INT
Rule 39    basic_type -> FLOAT
Rule 40    basic_type -> CHARACTER
Rule 41    basic_type -> BOOLEAN
Rule 42    if_conditional -> IF ( basic_expression ) { block_body_nonempty }
Rule 43    if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty }
Rule 44    while_loop -> WHILE ( basic_expression ) { block_body_nonempty }
Rule 45    function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; }
Rule 46    argument_list -> argument_list_nonempty
Rule 47    argument_list -> empty
Rule 48    argument_list_nonempty -> STRING_IMPLICIT : type , argument_list_nonempty
Rule 49    argument_list_nonempty -> STRING_IMPLICIT : type
Rule 50    basic_expression -> ( basic_expression )
Rule 51    basic_expression -> function_call
Rule 52    basic_expression -> object_call
Rule 53    basic_expression -> INTEGER
Rule 54    basic_expression -> REAL
Rule 55    basic_expression -> CHAR
Rule 56    basic_expression -> TR
Rule 57    basic_expression -> FL
Rule 58    basic_expression -> NULL
Rule 59    basic_expression -> STRING_IMPLICIT
Rule 60    basic_expression -> PLUS basic_expression
Rule 61    basic_expression -> MINUS basic_expression
Rule 62    basic_expression -> NOT basic_expression
Rule 63    basic_expression -> basic_expression PLUS basic_expression
Rule 64    basic_expression -> basic_expression MINUS basic_expression
Rule 65    basic_expression -> basic_expression TIMES basic_expression
Rule 66    basic_expression -> basic_expression DIVIDE basic_expression
Rule 67    basic_expression -> basic_expression AND basic_expression
Rule 68    basic_expression -> basic_expression OR basic_expression
Rule 69    basic_expression -> basic_expression LT basic_expression
Rule 70    basic_expression -> basic_expression LE basic_expression
Rule 71    basic_expression -> basic_expression EQ basic_expression
Rule 72    basic_expression -> basic_expression GE basic_expression
Rule 73    basic_expression -> basic_expression GT basic_expression
Rule 74    function_call -> STRING_IMPLICIT ( function_call_list )
Rule 75    function_call_list -> function_call_list_nonempty
Rule 76    function_call_list -> empty
Rule 77    function_call_list_nonempty -> basic_expression , function_call_list_nonempty
Rule 78    function_call_list_nonempty -> basic_expression
Rule 79    object_call -> STRING_IMPLICIT object_attribute_list
Rule 80    object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list
Rule 81    object_attribute_list -> . STRING_IMPLICIT object_attribute_list
Rule 82    object_attribute_list -> [ STRING_EXPLICIT ]
Rule 83    object_attribute_list -> . STRING_IMPLICIT
Rule 84    empty -> <empty>

Terminals, with rules where they appear

(                    : 42 43 44 45 50 74
)                    : 42 43 44 45 50 74
,                    : 19 29 48 77
.                    : 81 83
:                    : 21 32 33 45 48 49
;                    : 4 5 6 7 45
AND                  : 67
ASSIGN               : 23 24 27
BOOLEAN              : 41
CHAR                 : 55
CHARACTER            : 40
DIVIDE               : 66
ELSE                 : 43
EQ                   : 71
FL                   : 57
FLOAT                : 39
FUNCTION             : 45
GE                   : 72
GT                   : 73
IF                   : 42 43
INT                  : 38
INTEGER              : 53
LE                   : 70
LET                  : 18
LT                   : 69
MINUS                : 61 64
NOT                  : 62
NULL                 : 58
OR                   : 68
PLUS                 : 60 63
REAL                 : 54
RETURN               : 45
STRING_EXPLICIT      : 34 80 82
STRING_IMPLICIT      : 21 21 22 24 27 35 37 45 48 49 59 74 79 81 83
TIMES                : 65
TR                   : 56
TYPE                 : 27
WHILE                : 44
[                    : 80 82
]                    : 80 82
error                : 
{                    : 28 42 43 43 44 45
}                    : 28 42 43 43 44 45

Nonterminals, with rules where they appear

argument_list        : 45
argument_list_nonempty : 46 48
assignment           : 5
basic_expression     : 7 25 33 42 43 44 50 60 61 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 77 78
basic_type           : 32 36
block                : 2
block_body           : 45
block_body_nonempty  : 12 14 15 42 43 43 44
declaration          : 4 23
declaration_content  : 18 19
definition           : 6
empty                : 3 13 31 47 76
expression           : 23 24 45
file                 : 1 2 0
function             : 9
function_call        : 51
function_call_list   : 74
function_call_list_nonempty : 75 77
if_conditional       : 10
item                 : 19 20
key                  : 32 33
object               : 26 27
object_attribute_list : 79 80 81
object_call          : 52
object_content       : 28 29
object_item          : 29 30
simple_block         : 8 15 17
statement            : 1 14 16
type                 : 45 48 49
while_loop           : 11

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . statement file
    (2) file -> . block file
    (3) file -> . empty
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . basic_expression ;
    (8) block -> . simple_block
    (9) block -> . function
    (84) empty -> .
    (18) declaration -> . LET declaration_content
    (23) assignment -> . declaration ASSIGN expression
    (24) assignment -> . STRING_IMPLICIT ASSIGN expression
    (27) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (45) function -> . FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; }
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list
    (42) if_conditional -> . IF ( basic_expression ) { block_body_nonempty }
    (43) if_conditional -> . IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty }
    (44) while_loop -> . WHILE ( basic_expression ) { block_body_nonempty }

    $end            reduce using rule 84 (empty -> .)
    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    FUNCTION        shift and go to state 28
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    file                           shift and go to state 1
    statement                      shift and go to state 2
    block                          shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    basic_expression               shift and go to state 8
    simple_block                   shift and go to state 9
    function                       shift and go to state 10
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16
    if_conditional                 shift and go to state 26
    while_loop                     shift and go to state 27

state 1

    (0) S' -> file .



state 2

    (1) file -> statement . file
    (1) file -> . statement file
    (2) file -> . block file
    (3) file -> . empty
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . basic_expression ;
    (8) block -> . simple_block
    (9) block -> . function
    (84) empty -> .
    (18) declaration -> . LET declaration_content
    (23) assignment -> . declaration ASSIGN expression
    (24) assignment -> . STRING_IMPLICIT ASSIGN expression
    (27) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (45) function -> . FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; }
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list
    (42) if_conditional -> . IF ( basic_expression ) { block_body_nonempty }
    (43) if_conditional -> . IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty }
    (44) while_loop -> . WHILE ( basic_expression ) { block_body_nonempty }

    $end            reduce using rule 84 (empty -> .)
    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    FUNCTION        shift and go to state 28
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    statement                      shift and go to state 2
    file                           shift and go to state 31
    block                          shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    basic_expression               shift and go to state 8
    simple_block                   shift and go to state 9
    function                       shift and go to state 10
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16
    if_conditional                 shift and go to state 26
    while_loop                     shift and go to state 27

state 3

    (2) file -> block . file
    (1) file -> . statement file
    (2) file -> . block file
    (3) file -> . empty
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . basic_expression ;
    (8) block -> . simple_block
    (9) block -> . function
    (84) empty -> .
    (18) declaration -> . LET declaration_content
    (23) assignment -> . declaration ASSIGN expression
    (24) assignment -> . STRING_IMPLICIT ASSIGN expression
    (27) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (45) function -> . FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; }
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list
    (42) if_conditional -> . IF ( basic_expression ) { block_body_nonempty }
    (43) if_conditional -> . IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty }
    (44) while_loop -> . WHILE ( basic_expression ) { block_body_nonempty }

    $end            reduce using rule 84 (empty -> .)
    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    FUNCTION        shift and go to state 28
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    block                          shift and go to state 3
    file                           shift and go to state 32
    statement                      shift and go to state 2
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    basic_expression               shift and go to state 8
    simple_block                   shift and go to state 9
    function                       shift and go to state 10
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16
    if_conditional                 shift and go to state 26
    while_loop                     shift and go to state 27

state 4

    (3) file -> empty .

    $end            reduce using rule 3 (file -> empty .)


state 5

    (4) statement -> declaration . ;
    (23) assignment -> declaration . ASSIGN expression

    ;               shift and go to state 33
    ASSIGN          shift and go to state 34


state 6

    (5) statement -> assignment . ;

    ;               shift and go to state 35


state 7

    (6) statement -> definition . ;

    ;               shift and go to state 36


state 8

    (7) statement -> basic_expression . ;
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43
    LT              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GE              shift and go to state 47
    GT              shift and go to state 48


state 9

    (8) block -> simple_block .

    LET             reduce using rule 8 (block -> simple_block .)
    STRING_IMPLICIT reduce using rule 8 (block -> simple_block .)
    TYPE            reduce using rule 8 (block -> simple_block .)
    (               reduce using rule 8 (block -> simple_block .)
    INTEGER         reduce using rule 8 (block -> simple_block .)
    REAL            reduce using rule 8 (block -> simple_block .)
    CHAR            reduce using rule 8 (block -> simple_block .)
    TR              reduce using rule 8 (block -> simple_block .)
    FL              reduce using rule 8 (block -> simple_block .)
    NULL            reduce using rule 8 (block -> simple_block .)
    PLUS            reduce using rule 8 (block -> simple_block .)
    MINUS           reduce using rule 8 (block -> simple_block .)
    NOT             reduce using rule 8 (block -> simple_block .)
    FUNCTION        reduce using rule 8 (block -> simple_block .)
    IF              reduce using rule 8 (block -> simple_block .)
    WHILE           reduce using rule 8 (block -> simple_block .)
    $end            reduce using rule 8 (block -> simple_block .)


state 10

    (9) block -> function .

    LET             reduce using rule 9 (block -> function .)
    STRING_IMPLICIT reduce using rule 9 (block -> function .)
    TYPE            reduce using rule 9 (block -> function .)
    (               reduce using rule 9 (block -> function .)
    INTEGER         reduce using rule 9 (block -> function .)
    REAL            reduce using rule 9 (block -> function .)
    CHAR            reduce using rule 9 (block -> function .)
    TR              reduce using rule 9 (block -> function .)
    FL              reduce using rule 9 (block -> function .)
    NULL            reduce using rule 9 (block -> function .)
    PLUS            reduce using rule 9 (block -> function .)
    MINUS           reduce using rule 9 (block -> function .)
    NOT             reduce using rule 9 (block -> function .)
    FUNCTION        reduce using rule 9 (block -> function .)
    IF              reduce using rule 9 (block -> function .)
    WHILE           reduce using rule 9 (block -> function .)
    $end            reduce using rule 9 (block -> function .)


state 11

    (18) declaration -> LET . declaration_content
    (19) declaration_content -> . item , declaration_content
    (20) declaration_content -> . item
    (21) item -> . STRING_IMPLICIT : STRING_IMPLICIT
    (22) item -> . STRING_IMPLICIT

    STRING_IMPLICIT shift and go to state 51

    declaration_content            shift and go to state 49
    item                           shift and go to state 50

state 12

    (24) assignment -> STRING_IMPLICIT . ASSIGN expression
    (59) basic_expression -> STRING_IMPLICIT .
    (74) function_call -> STRING_IMPLICIT . ( function_call_list )
    (79) object_call -> STRING_IMPLICIT . object_attribute_list
    (80) object_attribute_list -> . [ STRING_EXPLICIT ] object_attribute_list
    (81) object_attribute_list -> . . STRING_IMPLICIT object_attribute_list
    (82) object_attribute_list -> . [ STRING_EXPLICIT ]
    (83) object_attribute_list -> . . STRING_IMPLICIT

    ASSIGN          shift and go to state 52
    ;               reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    PLUS            reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    MINUS           reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    TIMES           reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    DIVIDE          reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    AND             reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    OR              reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    LT              reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    LE              reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    EQ              reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    GE              reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    GT              reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    (               shift and go to state 53
    [               shift and go to state 55
    .               shift and go to state 56

    object_attribute_list          shift and go to state 54

state 13

    (27) definition -> TYPE . STRING_IMPLICIT ASSIGN object

    STRING_IMPLICIT shift and go to state 57


state 14

    (50) basic_expression -> ( . basic_expression )
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 58
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 15

    (51) basic_expression -> function_call .

    ;               reduce using rule 51 (basic_expression -> function_call .)
    PLUS            reduce using rule 51 (basic_expression -> function_call .)
    MINUS           reduce using rule 51 (basic_expression -> function_call .)
    TIMES           reduce using rule 51 (basic_expression -> function_call .)
    DIVIDE          reduce using rule 51 (basic_expression -> function_call .)
    AND             reduce using rule 51 (basic_expression -> function_call .)
    OR              reduce using rule 51 (basic_expression -> function_call .)
    LT              reduce using rule 51 (basic_expression -> function_call .)
    LE              reduce using rule 51 (basic_expression -> function_call .)
    EQ              reduce using rule 51 (basic_expression -> function_call .)
    GE              reduce using rule 51 (basic_expression -> function_call .)
    GT              reduce using rule 51 (basic_expression -> function_call .)
    )               reduce using rule 51 (basic_expression -> function_call .)
    ,               reduce using rule 51 (basic_expression -> function_call .)
    }               reduce using rule 51 (basic_expression -> function_call .)


state 16

    (52) basic_expression -> object_call .

    ;               reduce using rule 52 (basic_expression -> object_call .)
    PLUS            reduce using rule 52 (basic_expression -> object_call .)
    MINUS           reduce using rule 52 (basic_expression -> object_call .)
    TIMES           reduce using rule 52 (basic_expression -> object_call .)
    DIVIDE          reduce using rule 52 (basic_expression -> object_call .)
    AND             reduce using rule 52 (basic_expression -> object_call .)
    OR              reduce using rule 52 (basic_expression -> object_call .)
    LT              reduce using rule 52 (basic_expression -> object_call .)
    LE              reduce using rule 52 (basic_expression -> object_call .)
    EQ              reduce using rule 52 (basic_expression -> object_call .)
    GE              reduce using rule 52 (basic_expression -> object_call .)
    GT              reduce using rule 52 (basic_expression -> object_call .)
    )               reduce using rule 52 (basic_expression -> object_call .)
    ,               reduce using rule 52 (basic_expression -> object_call .)
    }               reduce using rule 52 (basic_expression -> object_call .)


state 17

    (53) basic_expression -> INTEGER .

    ;               reduce using rule 53 (basic_expression -> INTEGER .)
    PLUS            reduce using rule 53 (basic_expression -> INTEGER .)
    MINUS           reduce using rule 53 (basic_expression -> INTEGER .)
    TIMES           reduce using rule 53 (basic_expression -> INTEGER .)
    DIVIDE          reduce using rule 53 (basic_expression -> INTEGER .)
    AND             reduce using rule 53 (basic_expression -> INTEGER .)
    OR              reduce using rule 53 (basic_expression -> INTEGER .)
    LT              reduce using rule 53 (basic_expression -> INTEGER .)
    LE              reduce using rule 53 (basic_expression -> INTEGER .)
    EQ              reduce using rule 53 (basic_expression -> INTEGER .)
    GE              reduce using rule 53 (basic_expression -> INTEGER .)
    GT              reduce using rule 53 (basic_expression -> INTEGER .)
    )               reduce using rule 53 (basic_expression -> INTEGER .)
    ,               reduce using rule 53 (basic_expression -> INTEGER .)
    }               reduce using rule 53 (basic_expression -> INTEGER .)


state 18

    (54) basic_expression -> REAL .

    ;               reduce using rule 54 (basic_expression -> REAL .)
    PLUS            reduce using rule 54 (basic_expression -> REAL .)
    MINUS           reduce using rule 54 (basic_expression -> REAL .)
    TIMES           reduce using rule 54 (basic_expression -> REAL .)
    DIVIDE          reduce using rule 54 (basic_expression -> REAL .)
    AND             reduce using rule 54 (basic_expression -> REAL .)
    OR              reduce using rule 54 (basic_expression -> REAL .)
    LT              reduce using rule 54 (basic_expression -> REAL .)
    LE              reduce using rule 54 (basic_expression -> REAL .)
    EQ              reduce using rule 54 (basic_expression -> REAL .)
    GE              reduce using rule 54 (basic_expression -> REAL .)
    GT              reduce using rule 54 (basic_expression -> REAL .)
    )               reduce using rule 54 (basic_expression -> REAL .)
    ,               reduce using rule 54 (basic_expression -> REAL .)
    }               reduce using rule 54 (basic_expression -> REAL .)


state 19

    (55) basic_expression -> CHAR .

    ;               reduce using rule 55 (basic_expression -> CHAR .)
    PLUS            reduce using rule 55 (basic_expression -> CHAR .)
    MINUS           reduce using rule 55 (basic_expression -> CHAR .)
    TIMES           reduce using rule 55 (basic_expression -> CHAR .)
    DIVIDE          reduce using rule 55 (basic_expression -> CHAR .)
    AND             reduce using rule 55 (basic_expression -> CHAR .)
    OR              reduce using rule 55 (basic_expression -> CHAR .)
    LT              reduce using rule 55 (basic_expression -> CHAR .)
    LE              reduce using rule 55 (basic_expression -> CHAR .)
    EQ              reduce using rule 55 (basic_expression -> CHAR .)
    GE              reduce using rule 55 (basic_expression -> CHAR .)
    GT              reduce using rule 55 (basic_expression -> CHAR .)
    )               reduce using rule 55 (basic_expression -> CHAR .)
    ,               reduce using rule 55 (basic_expression -> CHAR .)
    }               reduce using rule 55 (basic_expression -> CHAR .)


state 20

    (56) basic_expression -> TR .

    ;               reduce using rule 56 (basic_expression -> TR .)
    PLUS            reduce using rule 56 (basic_expression -> TR .)
    MINUS           reduce using rule 56 (basic_expression -> TR .)
    TIMES           reduce using rule 56 (basic_expression -> TR .)
    DIVIDE          reduce using rule 56 (basic_expression -> TR .)
    AND             reduce using rule 56 (basic_expression -> TR .)
    OR              reduce using rule 56 (basic_expression -> TR .)
    LT              reduce using rule 56 (basic_expression -> TR .)
    LE              reduce using rule 56 (basic_expression -> TR .)
    EQ              reduce using rule 56 (basic_expression -> TR .)
    GE              reduce using rule 56 (basic_expression -> TR .)
    GT              reduce using rule 56 (basic_expression -> TR .)
    )               reduce using rule 56 (basic_expression -> TR .)
    ,               reduce using rule 56 (basic_expression -> TR .)
    }               reduce using rule 56 (basic_expression -> TR .)


state 21

    (57) basic_expression -> FL .

    ;               reduce using rule 57 (basic_expression -> FL .)
    PLUS            reduce using rule 57 (basic_expression -> FL .)
    MINUS           reduce using rule 57 (basic_expression -> FL .)
    TIMES           reduce using rule 57 (basic_expression -> FL .)
    DIVIDE          reduce using rule 57 (basic_expression -> FL .)
    AND             reduce using rule 57 (basic_expression -> FL .)
    OR              reduce using rule 57 (basic_expression -> FL .)
    LT              reduce using rule 57 (basic_expression -> FL .)
    LE              reduce using rule 57 (basic_expression -> FL .)
    EQ              reduce using rule 57 (basic_expression -> FL .)
    GE              reduce using rule 57 (basic_expression -> FL .)
    GT              reduce using rule 57 (basic_expression -> FL .)
    )               reduce using rule 57 (basic_expression -> FL .)
    ,               reduce using rule 57 (basic_expression -> FL .)
    }               reduce using rule 57 (basic_expression -> FL .)


state 22

    (58) basic_expression -> NULL .

    ;               reduce using rule 58 (basic_expression -> NULL .)
    PLUS            reduce using rule 58 (basic_expression -> NULL .)
    MINUS           reduce using rule 58 (basic_expression -> NULL .)
    TIMES           reduce using rule 58 (basic_expression -> NULL .)
    DIVIDE          reduce using rule 58 (basic_expression -> NULL .)
    AND             reduce using rule 58 (basic_expression -> NULL .)
    OR              reduce using rule 58 (basic_expression -> NULL .)
    LT              reduce using rule 58 (basic_expression -> NULL .)
    LE              reduce using rule 58 (basic_expression -> NULL .)
    EQ              reduce using rule 58 (basic_expression -> NULL .)
    GE              reduce using rule 58 (basic_expression -> NULL .)
    GT              reduce using rule 58 (basic_expression -> NULL .)
    )               reduce using rule 58 (basic_expression -> NULL .)
    ,               reduce using rule 58 (basic_expression -> NULL .)
    }               reduce using rule 58 (basic_expression -> NULL .)


state 23

    (60) basic_expression -> PLUS . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 60
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 24

    (61) basic_expression -> MINUS . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 61
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 25

    (62) basic_expression -> NOT . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 62
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 26

    (10) simple_block -> if_conditional .

    LET             reduce using rule 10 (simple_block -> if_conditional .)
    STRING_IMPLICIT reduce using rule 10 (simple_block -> if_conditional .)
    TYPE            reduce using rule 10 (simple_block -> if_conditional .)
    (               reduce using rule 10 (simple_block -> if_conditional .)
    INTEGER         reduce using rule 10 (simple_block -> if_conditional .)
    REAL            reduce using rule 10 (simple_block -> if_conditional .)
    CHAR            reduce using rule 10 (simple_block -> if_conditional .)
    TR              reduce using rule 10 (simple_block -> if_conditional .)
    FL              reduce using rule 10 (simple_block -> if_conditional .)
    NULL            reduce using rule 10 (simple_block -> if_conditional .)
    PLUS            reduce using rule 10 (simple_block -> if_conditional .)
    MINUS           reduce using rule 10 (simple_block -> if_conditional .)
    NOT             reduce using rule 10 (simple_block -> if_conditional .)
    FUNCTION        reduce using rule 10 (simple_block -> if_conditional .)
    IF              reduce using rule 10 (simple_block -> if_conditional .)
    WHILE           reduce using rule 10 (simple_block -> if_conditional .)
    $end            reduce using rule 10 (simple_block -> if_conditional .)
    }               reduce using rule 10 (simple_block -> if_conditional .)
    RETURN          reduce using rule 10 (simple_block -> if_conditional .)


state 27

    (11) simple_block -> while_loop .

    LET             reduce using rule 11 (simple_block -> while_loop .)
    STRING_IMPLICIT reduce using rule 11 (simple_block -> while_loop .)
    TYPE            reduce using rule 11 (simple_block -> while_loop .)
    (               reduce using rule 11 (simple_block -> while_loop .)
    INTEGER         reduce using rule 11 (simple_block -> while_loop .)
    REAL            reduce using rule 11 (simple_block -> while_loop .)
    CHAR            reduce using rule 11 (simple_block -> while_loop .)
    TR              reduce using rule 11 (simple_block -> while_loop .)
    FL              reduce using rule 11 (simple_block -> while_loop .)
    NULL            reduce using rule 11 (simple_block -> while_loop .)
    PLUS            reduce using rule 11 (simple_block -> while_loop .)
    MINUS           reduce using rule 11 (simple_block -> while_loop .)
    NOT             reduce using rule 11 (simple_block -> while_loop .)
    FUNCTION        reduce using rule 11 (simple_block -> while_loop .)
    IF              reduce using rule 11 (simple_block -> while_loop .)
    WHILE           reduce using rule 11 (simple_block -> while_loop .)
    $end            reduce using rule 11 (simple_block -> while_loop .)
    }               reduce using rule 11 (simple_block -> while_loop .)
    RETURN          reduce using rule 11 (simple_block -> while_loop .)


state 28

    (45) function -> FUNCTION . STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; }

    STRING_IMPLICIT shift and go to state 63


state 29

    (42) if_conditional -> IF . ( basic_expression ) { block_body_nonempty }
    (43) if_conditional -> IF . ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty }

    (               shift and go to state 64


state 30

    (44) while_loop -> WHILE . ( basic_expression ) { block_body_nonempty }

    (               shift and go to state 65


state 31

    (1) file -> statement file .

    $end            reduce using rule 1 (file -> statement file .)


state 32

    (2) file -> block file .

    $end            reduce using rule 2 (file -> block file .)


state 33

    (4) statement -> declaration ; .

    LET             reduce using rule 4 (statement -> declaration ; .)
    STRING_IMPLICIT reduce using rule 4 (statement -> declaration ; .)
    TYPE            reduce using rule 4 (statement -> declaration ; .)
    (               reduce using rule 4 (statement -> declaration ; .)
    INTEGER         reduce using rule 4 (statement -> declaration ; .)
    REAL            reduce using rule 4 (statement -> declaration ; .)
    CHAR            reduce using rule 4 (statement -> declaration ; .)
    TR              reduce using rule 4 (statement -> declaration ; .)
    FL              reduce using rule 4 (statement -> declaration ; .)
    NULL            reduce using rule 4 (statement -> declaration ; .)
    PLUS            reduce using rule 4 (statement -> declaration ; .)
    MINUS           reduce using rule 4 (statement -> declaration ; .)
    NOT             reduce using rule 4 (statement -> declaration ; .)
    FUNCTION        reduce using rule 4 (statement -> declaration ; .)
    IF              reduce using rule 4 (statement -> declaration ; .)
    WHILE           reduce using rule 4 (statement -> declaration ; .)
    $end            reduce using rule 4 (statement -> declaration ; .)
    }               reduce using rule 4 (statement -> declaration ; .)
    RETURN          reduce using rule 4 (statement -> declaration ; .)


state 34

    (23) assignment -> declaration ASSIGN . expression
    (25) expression -> . basic_expression
    (26) expression -> . object
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (28) object -> . { object_content }
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    {               shift and go to state 69

    expression                     shift and go to state 66
    basic_expression               shift and go to state 67
    object                         shift and go to state 68
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 35

    (5) statement -> assignment ; .

    LET             reduce using rule 5 (statement -> assignment ; .)
    STRING_IMPLICIT reduce using rule 5 (statement -> assignment ; .)
    TYPE            reduce using rule 5 (statement -> assignment ; .)
    (               reduce using rule 5 (statement -> assignment ; .)
    INTEGER         reduce using rule 5 (statement -> assignment ; .)
    REAL            reduce using rule 5 (statement -> assignment ; .)
    CHAR            reduce using rule 5 (statement -> assignment ; .)
    TR              reduce using rule 5 (statement -> assignment ; .)
    FL              reduce using rule 5 (statement -> assignment ; .)
    NULL            reduce using rule 5 (statement -> assignment ; .)
    PLUS            reduce using rule 5 (statement -> assignment ; .)
    MINUS           reduce using rule 5 (statement -> assignment ; .)
    NOT             reduce using rule 5 (statement -> assignment ; .)
    FUNCTION        reduce using rule 5 (statement -> assignment ; .)
    IF              reduce using rule 5 (statement -> assignment ; .)
    WHILE           reduce using rule 5 (statement -> assignment ; .)
    $end            reduce using rule 5 (statement -> assignment ; .)
    }               reduce using rule 5 (statement -> assignment ; .)
    RETURN          reduce using rule 5 (statement -> assignment ; .)


state 36

    (6) statement -> definition ; .

    LET             reduce using rule 6 (statement -> definition ; .)
    STRING_IMPLICIT reduce using rule 6 (statement -> definition ; .)
    TYPE            reduce using rule 6 (statement -> definition ; .)
    (               reduce using rule 6 (statement -> definition ; .)
    INTEGER         reduce using rule 6 (statement -> definition ; .)
    REAL            reduce using rule 6 (statement -> definition ; .)
    CHAR            reduce using rule 6 (statement -> definition ; .)
    TR              reduce using rule 6 (statement -> definition ; .)
    FL              reduce using rule 6 (statement -> definition ; .)
    NULL            reduce using rule 6 (statement -> definition ; .)
    PLUS            reduce using rule 6 (statement -> definition ; .)
    MINUS           reduce using rule 6 (statement -> definition ; .)
    NOT             reduce using rule 6 (statement -> definition ; .)
    FUNCTION        reduce using rule 6 (statement -> definition ; .)
    IF              reduce using rule 6 (statement -> definition ; .)
    WHILE           reduce using rule 6 (statement -> definition ; .)
    $end            reduce using rule 6 (statement -> definition ; .)
    }               reduce using rule 6 (statement -> definition ; .)
    RETURN          reduce using rule 6 (statement -> definition ; .)


state 37

    (7) statement -> basic_expression ; .

    LET             reduce using rule 7 (statement -> basic_expression ; .)
    STRING_IMPLICIT reduce using rule 7 (statement -> basic_expression ; .)
    TYPE            reduce using rule 7 (statement -> basic_expression ; .)
    (               reduce using rule 7 (statement -> basic_expression ; .)
    INTEGER         reduce using rule 7 (statement -> basic_expression ; .)
    REAL            reduce using rule 7 (statement -> basic_expression ; .)
    CHAR            reduce using rule 7 (statement -> basic_expression ; .)
    TR              reduce using rule 7 (statement -> basic_expression ; .)
    FL              reduce using rule 7 (statement -> basic_expression ; .)
    NULL            reduce using rule 7 (statement -> basic_expression ; .)
    PLUS            reduce using rule 7 (statement -> basic_expression ; .)
    MINUS           reduce using rule 7 (statement -> basic_expression ; .)
    NOT             reduce using rule 7 (statement -> basic_expression ; .)
    FUNCTION        reduce using rule 7 (statement -> basic_expression ; .)
    IF              reduce using rule 7 (statement -> basic_expression ; .)
    WHILE           reduce using rule 7 (statement -> basic_expression ; .)
    $end            reduce using rule 7 (statement -> basic_expression ; .)
    }               reduce using rule 7 (statement -> basic_expression ; .)
    RETURN          reduce using rule 7 (statement -> basic_expression ; .)


state 38

    (63) basic_expression -> basic_expression PLUS . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 70
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 39

    (64) basic_expression -> basic_expression MINUS . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 71
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 40

    (65) basic_expression -> basic_expression TIMES . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 72
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 41

    (66) basic_expression -> basic_expression DIVIDE . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 73
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 42

    (67) basic_expression -> basic_expression AND . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 74
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 43

    (68) basic_expression -> basic_expression OR . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 75
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 44

    (69) basic_expression -> basic_expression LT . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 76
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 45

    (70) basic_expression -> basic_expression LE . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 77
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 46

    (71) basic_expression -> basic_expression EQ . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 78
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 47

    (72) basic_expression -> basic_expression GE . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 79
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 48

    (73) basic_expression -> basic_expression GT . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 80
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 49

    (18) declaration -> LET declaration_content .

    ;               reduce using rule 18 (declaration -> LET declaration_content .)
    ASSIGN          reduce using rule 18 (declaration -> LET declaration_content .)


state 50

    (19) declaration_content -> item . , declaration_content
    (20) declaration_content -> item .

    ,               shift and go to state 81
    ;               reduce using rule 20 (declaration_content -> item .)
    ASSIGN          reduce using rule 20 (declaration_content -> item .)


state 51

    (21) item -> STRING_IMPLICIT . : STRING_IMPLICIT
    (22) item -> STRING_IMPLICIT .

    :               shift and go to state 82
    ,               reduce using rule 22 (item -> STRING_IMPLICIT .)
    ;               reduce using rule 22 (item -> STRING_IMPLICIT .)
    ASSIGN          reduce using rule 22 (item -> STRING_IMPLICIT .)


state 52

    (24) assignment -> STRING_IMPLICIT ASSIGN . expression
    (25) expression -> . basic_expression
    (26) expression -> . object
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (28) object -> . { object_content }
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    {               shift and go to state 69

    expression                     shift and go to state 83
    basic_expression               shift and go to state 67
    object                         shift and go to state 68
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 53

    (74) function_call -> STRING_IMPLICIT ( . function_call_list )
    (75) function_call_list -> . function_call_list_nonempty
    (76) function_call_list -> . empty
    (77) function_call_list_nonempty -> . basic_expression , function_call_list_nonempty
    (78) function_call_list_nonempty -> . basic_expression
    (84) empty -> .
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    )               reduce using rule 84 (empty -> .)
    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    function_call_list             shift and go to state 84
    function_call_list_nonempty    shift and go to state 85
    empty                          shift and go to state 86
    basic_expression               shift and go to state 87
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 54

    (79) object_call -> STRING_IMPLICIT object_attribute_list .

    ;               reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    PLUS            reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    MINUS           reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    TIMES           reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    DIVIDE          reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    AND             reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    OR              reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    LT              reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    LE              reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    EQ              reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    GE              reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    GT              reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    )               reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    ,               reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)
    }               reduce using rule 79 (object_call -> STRING_IMPLICIT object_attribute_list .)


state 55

    (80) object_attribute_list -> [ . STRING_EXPLICIT ] object_attribute_list
    (82) object_attribute_list -> [ . STRING_EXPLICIT ]

    STRING_EXPLICIT shift and go to state 88


state 56

    (81) object_attribute_list -> . . STRING_IMPLICIT object_attribute_list
    (83) object_attribute_list -> . . STRING_IMPLICIT

    STRING_IMPLICIT shift and go to state 89


state 57

    (27) definition -> TYPE STRING_IMPLICIT . ASSIGN object

    ASSIGN          shift and go to state 90


state 58

    (50) basic_expression -> ( basic_expression . )
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    )               shift and go to state 91
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43
    LT              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GE              shift and go to state 47
    GT              shift and go to state 48


state 59

    (59) basic_expression -> STRING_IMPLICIT .
    (74) function_call -> STRING_IMPLICIT . ( function_call_list )
    (79) object_call -> STRING_IMPLICIT . object_attribute_list
    (80) object_attribute_list -> . [ STRING_EXPLICIT ] object_attribute_list
    (81) object_attribute_list -> . . STRING_IMPLICIT object_attribute_list
    (82) object_attribute_list -> . [ STRING_EXPLICIT ]
    (83) object_attribute_list -> . . STRING_IMPLICIT

    )               reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    PLUS            reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    MINUS           reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    TIMES           reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    DIVIDE          reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    AND             reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    OR              reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    LT              reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    LE              reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    EQ              reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    GE              reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    GT              reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    ;               reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    ,               reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    }               reduce using rule 59 (basic_expression -> STRING_IMPLICIT .)
    (               shift and go to state 53
    [               shift and go to state 55
    .               shift and go to state 56

    object_attribute_list          shift and go to state 54

state 60

    (60) basic_expression -> PLUS basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    PLUS            reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    MINUS           reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    TIMES           reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    DIVIDE          reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    AND             reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    OR              reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    LT              reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    LE              reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    EQ              reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    GE              reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    GT              reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    )               reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    ,               reduce using rule 60 (basic_expression -> PLUS basic_expression .)
    }               reduce using rule 60 (basic_expression -> PLUS basic_expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! LT              [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]


state 61

    (61) basic_expression -> MINUS basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    PLUS            reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    MINUS           reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    TIMES           reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    DIVIDE          reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    AND             reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    OR              reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    LT              reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    LE              reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    EQ              reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    GE              reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    GT              reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    )               reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    ,               reduce using rule 61 (basic_expression -> MINUS basic_expression .)
    }               reduce using rule 61 (basic_expression -> MINUS basic_expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! LT              [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]


state 62

    (62) basic_expression -> NOT basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 62 (basic_expression -> NOT basic_expression .)
    PLUS            reduce using rule 62 (basic_expression -> NOT basic_expression .)
    MINUS           reduce using rule 62 (basic_expression -> NOT basic_expression .)
    TIMES           reduce using rule 62 (basic_expression -> NOT basic_expression .)
    DIVIDE          reduce using rule 62 (basic_expression -> NOT basic_expression .)
    AND             reduce using rule 62 (basic_expression -> NOT basic_expression .)
    OR              reduce using rule 62 (basic_expression -> NOT basic_expression .)
    LT              reduce using rule 62 (basic_expression -> NOT basic_expression .)
    LE              reduce using rule 62 (basic_expression -> NOT basic_expression .)
    EQ              reduce using rule 62 (basic_expression -> NOT basic_expression .)
    GE              reduce using rule 62 (basic_expression -> NOT basic_expression .)
    GT              reduce using rule 62 (basic_expression -> NOT basic_expression .)
    )               reduce using rule 62 (basic_expression -> NOT basic_expression .)
    ,               reduce using rule 62 (basic_expression -> NOT basic_expression .)
    }               reduce using rule 62 (basic_expression -> NOT basic_expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! LT              [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]


state 63

    (45) function -> FUNCTION STRING_IMPLICIT . ( argument_list ) : type { block_body RETURN expression ; }

    (               shift and go to state 92


state 64

    (42) if_conditional -> IF ( . basic_expression ) { block_body_nonempty }
    (43) if_conditional -> IF ( . basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty }
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 93
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 65

    (44) while_loop -> WHILE ( . basic_expression ) { block_body_nonempty }
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 94
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 66

    (23) assignment -> declaration ASSIGN expression .

    ;               reduce using rule 23 (assignment -> declaration ASSIGN expression .)


state 67

    (25) expression -> basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 25 (expression -> basic_expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43
    LT              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GE              shift and go to state 47
    GT              shift and go to state 48


state 68

    (26) expression -> object .

    ;               reduce using rule 26 (expression -> object .)


state 69

    (28) object -> { . object_content }
    (29) object_content -> . object_item , object_content
    (30) object_content -> . object_item
    (31) object_content -> . empty
    (32) object_item -> . key : basic_type
    (33) object_item -> . key : basic_expression
    (84) empty -> .
    (34) key -> . STRING_EXPLICIT
    (35) key -> . STRING_IMPLICIT

    }               reduce using rule 84 (empty -> .)
    STRING_EXPLICIT shift and go to state 99
    STRING_IMPLICIT shift and go to state 100

    object_content                 shift and go to state 95
    object_item                    shift and go to state 96
    empty                          shift and go to state 97
    key                            shift and go to state 98

state 70

    (63) basic_expression -> basic_expression PLUS basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    PLUS            reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    MINUS           reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    AND             reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    OR              reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    LT              reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    LE              reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    EQ              reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    GE              reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    GT              reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    )               reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    ,               reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    }               reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41

  ! TIMES           [ reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .) ]
  ! DIVIDE          [ reduce using rule 63 (basic_expression -> basic_expression PLUS basic_expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! LT              [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]


state 71

    (64) basic_expression -> basic_expression MINUS basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    PLUS            reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    MINUS           reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    AND             reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    OR              reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    LT              reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    LE              reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    EQ              reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    GE              reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    GT              reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    )               reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    ,               reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    }               reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41

  ! TIMES           [ reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .) ]
  ! DIVIDE          [ reduce using rule 64 (basic_expression -> basic_expression MINUS basic_expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! LT              [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]


state 72

    (65) basic_expression -> basic_expression TIMES basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    PLUS            reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    MINUS           reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    TIMES           reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    DIVIDE          reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    AND             reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    OR              reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    LT              reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    LE              reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    EQ              reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    GE              reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    GT              reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    )               reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    ,               reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)
    }               reduce using rule 65 (basic_expression -> basic_expression TIMES basic_expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! LT              [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]


state 73

    (66) basic_expression -> basic_expression DIVIDE basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    PLUS            reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    MINUS           reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    TIMES           reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    DIVIDE          reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    AND             reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    OR              reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    LT              reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    LE              reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    EQ              reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    GE              reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    GT              reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    )               reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    ,               reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)
    }               reduce using rule 66 (basic_expression -> basic_expression DIVIDE basic_expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! LT              [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]


state 74

    (67) basic_expression -> basic_expression AND basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .)
    AND             reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .)
    OR              reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .)
    )               reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .)
    ,               reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .)
    }               reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    LT              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GE              shift and go to state 47
    GT              shift and go to state 48

  ! PLUS            [ reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .) ]
  ! MINUS           [ reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .) ]
  ! TIMES           [ reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .) ]
  ! DIVIDE          [ reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .) ]
  ! LT              [ reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .) ]
  ! LE              [ reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .) ]
  ! EQ              [ reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .) ]
  ! GE              [ reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .) ]
  ! GT              [ reduce using rule 67 (basic_expression -> basic_expression AND basic_expression .) ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 75

    (68) basic_expression -> basic_expression OR basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .)
    AND             reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .)
    OR              reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .)
    )               reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .)
    ,               reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .)
    }               reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    LT              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GE              shift and go to state 47
    GT              shift and go to state 48

  ! PLUS            [ reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .) ]
  ! MINUS           [ reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .) ]
  ! TIMES           [ reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .) ]
  ! DIVIDE          [ reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .) ]
  ! LT              [ reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .) ]
  ! LE              [ reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .) ]
  ! EQ              [ reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .) ]
  ! GE              [ reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .) ]
  ! GT              [ reduce using rule 68 (basic_expression -> basic_expression OR basic_expression .) ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]


state 76

    (69) basic_expression -> basic_expression LT basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .)
    AND             reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .)
    OR              reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .)
    LT              reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .)
    LE              reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .)
    EQ              reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .)
    GE              reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .)
    GT              reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .)
    )               reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .)
    ,               reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .)
    }               reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41

  ! PLUS            [ reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .) ]
  ! MINUS           [ reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .) ]
  ! TIMES           [ reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .) ]
  ! DIVIDE          [ reduce using rule 69 (basic_expression -> basic_expression LT basic_expression .) ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! LT              [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]


state 77

    (70) basic_expression -> basic_expression LE basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .)
    AND             reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .)
    OR              reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .)
    LT              reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .)
    LE              reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .)
    EQ              reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .)
    GE              reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .)
    GT              reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .)
    )               reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .)
    ,               reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .)
    }               reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41

  ! PLUS            [ reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .) ]
  ! MINUS           [ reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .) ]
  ! TIMES           [ reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .) ]
  ! DIVIDE          [ reduce using rule 70 (basic_expression -> basic_expression LE basic_expression .) ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! LT              [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]


state 78

    (71) basic_expression -> basic_expression EQ basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .)
    AND             reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .)
    OR              reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .)
    LT              reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .)
    LE              reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .)
    EQ              reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .)
    GE              reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .)
    GT              reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .)
    )               reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .)
    ,               reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .)
    }               reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41

  ! PLUS            [ reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .) ]
  ! MINUS           [ reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .) ]
  ! TIMES           [ reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .) ]
  ! DIVIDE          [ reduce using rule 71 (basic_expression -> basic_expression EQ basic_expression .) ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! LT              [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]


state 79

    (72) basic_expression -> basic_expression GE basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .)
    AND             reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .)
    OR              reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .)
    LT              reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .)
    LE              reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .)
    EQ              reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .)
    GE              reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .)
    GT              reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .)
    )               reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .)
    ,               reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .)
    }               reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41

  ! PLUS            [ reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .) ]
  ! MINUS           [ reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .) ]
  ! TIMES           [ reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .) ]
  ! DIVIDE          [ reduce using rule 72 (basic_expression -> basic_expression GE basic_expression .) ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! LT              [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]


state 80

    (73) basic_expression -> basic_expression GT basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ;               reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .)
    AND             reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .)
    OR              reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .)
    LT              reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .)
    LE              reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .)
    EQ              reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .)
    GE              reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .)
    GT              reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .)
    )               reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .)
    ,               reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .)
    }               reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41

  ! PLUS            [ reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .) ]
  ! MINUS           [ reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .) ]
  ! TIMES           [ reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .) ]
  ! DIVIDE          [ reduce using rule 73 (basic_expression -> basic_expression GT basic_expression .) ]
  ! AND             [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! LT              [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! EQ              [ shift and go to state 46 ]
  ! GE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]


state 81

    (19) declaration_content -> item , . declaration_content
    (19) declaration_content -> . item , declaration_content
    (20) declaration_content -> . item
    (21) item -> . STRING_IMPLICIT : STRING_IMPLICIT
    (22) item -> . STRING_IMPLICIT

    STRING_IMPLICIT shift and go to state 51

    item                           shift and go to state 50
    declaration_content            shift and go to state 101

state 82

    (21) item -> STRING_IMPLICIT : . STRING_IMPLICIT

    STRING_IMPLICIT shift and go to state 102


state 83

    (24) assignment -> STRING_IMPLICIT ASSIGN expression .

    ;               reduce using rule 24 (assignment -> STRING_IMPLICIT ASSIGN expression .)


state 84

    (74) function_call -> STRING_IMPLICIT ( function_call_list . )

    )               shift and go to state 103


state 85

    (75) function_call_list -> function_call_list_nonempty .

    )               reduce using rule 75 (function_call_list -> function_call_list_nonempty .)


state 86

    (76) function_call_list -> empty .

    )               reduce using rule 76 (function_call_list -> empty .)


state 87

    (77) function_call_list_nonempty -> basic_expression . , function_call_list_nonempty
    (78) function_call_list_nonempty -> basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ,               shift and go to state 104
    )               reduce using rule 78 (function_call_list_nonempty -> basic_expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43
    LT              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GE              shift and go to state 47
    GT              shift and go to state 48


state 88

    (80) object_attribute_list -> [ STRING_EXPLICIT . ] object_attribute_list
    (82) object_attribute_list -> [ STRING_EXPLICIT . ]

    ]               shift and go to state 105


state 89

    (81) object_attribute_list -> . STRING_IMPLICIT . object_attribute_list
    (83) object_attribute_list -> . STRING_IMPLICIT .
    (80) object_attribute_list -> . [ STRING_EXPLICIT ] object_attribute_list
    (81) object_attribute_list -> . . STRING_IMPLICIT object_attribute_list
    (82) object_attribute_list -> . [ STRING_EXPLICIT ]
    (83) object_attribute_list -> . . STRING_IMPLICIT

    ;               reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    PLUS            reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    MINUS           reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    TIMES           reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    DIVIDE          reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    AND             reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    OR              reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    LT              reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    LE              reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    EQ              reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    GE              reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    GT              reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    )               reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    ,               reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    }               reduce using rule 83 (object_attribute_list -> . STRING_IMPLICIT .)
    [               shift and go to state 55
    .               shift and go to state 56

    object_attribute_list          shift and go to state 106

state 90

    (27) definition -> TYPE STRING_IMPLICIT ASSIGN . object
    (28) object -> . { object_content }

    {               shift and go to state 69

    object                         shift and go to state 107

state 91

    (50) basic_expression -> ( basic_expression ) .

    ;               reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    PLUS            reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    MINUS           reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    TIMES           reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    DIVIDE          reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    AND             reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    OR              reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    LT              reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    LE              reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    EQ              reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    GE              reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    GT              reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    )               reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    ,               reduce using rule 50 (basic_expression -> ( basic_expression ) .)
    }               reduce using rule 50 (basic_expression -> ( basic_expression ) .)


state 92

    (45) function -> FUNCTION STRING_IMPLICIT ( . argument_list ) : type { block_body RETURN expression ; }
    (46) argument_list -> . argument_list_nonempty
    (47) argument_list -> . empty
    (48) argument_list_nonempty -> . STRING_IMPLICIT : type , argument_list_nonempty
    (49) argument_list_nonempty -> . STRING_IMPLICIT : type
    (84) empty -> .

    STRING_IMPLICIT shift and go to state 108
    )               reduce using rule 84 (empty -> .)

    argument_list                  shift and go to state 109
    argument_list_nonempty         shift and go to state 110
    empty                          shift and go to state 111

state 93

    (42) if_conditional -> IF ( basic_expression . ) { block_body_nonempty }
    (43) if_conditional -> IF ( basic_expression . ) { block_body_nonempty } ELSE { block_body_nonempty }
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    )               shift and go to state 112
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43
    LT              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GE              shift and go to state 47
    GT              shift and go to state 48


state 94

    (44) while_loop -> WHILE ( basic_expression . ) { block_body_nonempty }
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    )               shift and go to state 113
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43
    LT              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GE              shift and go to state 47
    GT              shift and go to state 48


state 95

    (28) object -> { object_content . }

    }               shift and go to state 114


state 96

    (29) object_content -> object_item . , object_content
    (30) object_content -> object_item .

    ,               shift and go to state 115
    }               reduce using rule 30 (object_content -> object_item .)


state 97

    (31) object_content -> empty .

    }               reduce using rule 31 (object_content -> empty .)


state 98

    (32) object_item -> key . : basic_type
    (33) object_item -> key . : basic_expression

    :               shift and go to state 116


state 99

    (34) key -> STRING_EXPLICIT .

    :               reduce using rule 34 (key -> STRING_EXPLICIT .)


state 100

    (35) key -> STRING_IMPLICIT .

    :               reduce using rule 35 (key -> STRING_IMPLICIT .)


state 101

    (19) declaration_content -> item , declaration_content .

    ;               reduce using rule 19 (declaration_content -> item , declaration_content .)
    ASSIGN          reduce using rule 19 (declaration_content -> item , declaration_content .)


state 102

    (21) item -> STRING_IMPLICIT : STRING_IMPLICIT .

    ,               reduce using rule 21 (item -> STRING_IMPLICIT : STRING_IMPLICIT .)
    ;               reduce using rule 21 (item -> STRING_IMPLICIT : STRING_IMPLICIT .)
    ASSIGN          reduce using rule 21 (item -> STRING_IMPLICIT : STRING_IMPLICIT .)


state 103

    (74) function_call -> STRING_IMPLICIT ( function_call_list ) .

    ;               reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    PLUS            reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    MINUS           reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    TIMES           reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    DIVIDE          reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    AND             reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    OR              reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    LT              reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    LE              reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    EQ              reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    GE              reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    GT              reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    )               reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    ,               reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    }               reduce using rule 74 (function_call -> STRING_IMPLICIT ( function_call_list ) .)


state 104

    (77) function_call_list_nonempty -> basic_expression , . function_call_list_nonempty
    (77) function_call_list_nonempty -> . basic_expression , function_call_list_nonempty
    (78) function_call_list_nonempty -> . basic_expression
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_expression               shift and go to state 87
    function_call_list_nonempty    shift and go to state 117
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 105

    (80) object_attribute_list -> [ STRING_EXPLICIT ] . object_attribute_list
    (82) object_attribute_list -> [ STRING_EXPLICIT ] .
    (80) object_attribute_list -> . [ STRING_EXPLICIT ] object_attribute_list
    (81) object_attribute_list -> . . STRING_IMPLICIT object_attribute_list
    (82) object_attribute_list -> . [ STRING_EXPLICIT ]
    (83) object_attribute_list -> . . STRING_IMPLICIT

    ;               reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    PLUS            reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    MINUS           reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    TIMES           reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    DIVIDE          reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    AND             reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    OR              reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    LT              reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    LE              reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    EQ              reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    GE              reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    GT              reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    )               reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    ,               reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    }               reduce using rule 82 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    [               shift and go to state 55
    .               shift and go to state 56

    object_attribute_list          shift and go to state 118

state 106

    (81) object_attribute_list -> . STRING_IMPLICIT object_attribute_list .

    ;               reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    PLUS            reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    MINUS           reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    TIMES           reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    DIVIDE          reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    AND             reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    OR              reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    LT              reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    LE              reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    EQ              reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    GE              reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    GT              reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    )               reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    ,               reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    }               reduce using rule 81 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)


state 107

    (27) definition -> TYPE STRING_IMPLICIT ASSIGN object .

    ;               reduce using rule 27 (definition -> TYPE STRING_IMPLICIT ASSIGN object .)


state 108

    (48) argument_list_nonempty -> STRING_IMPLICIT . : type , argument_list_nonempty
    (49) argument_list_nonempty -> STRING_IMPLICIT . : type

    :               shift and go to state 119


state 109

    (45) function -> FUNCTION STRING_IMPLICIT ( argument_list . ) : type { block_body RETURN expression ; }

    )               shift and go to state 120


state 110

    (46) argument_list -> argument_list_nonempty .

    )               reduce using rule 46 (argument_list -> argument_list_nonempty .)


state 111

    (47) argument_list -> empty .

    )               reduce using rule 47 (argument_list -> empty .)


state 112

    (42) if_conditional -> IF ( basic_expression ) . { block_body_nonempty }
    (43) if_conditional -> IF ( basic_expression ) . { block_body_nonempty } ELSE { block_body_nonempty }

    {               shift and go to state 121


state 113

    (44) while_loop -> WHILE ( basic_expression ) . { block_body_nonempty }

    {               shift and go to state 122


state 114

    (28) object -> { object_content } .

    ;               reduce using rule 28 (object -> { object_content } .)


state 115

    (29) object_content -> object_item , . object_content
    (29) object_content -> . object_item , object_content
    (30) object_content -> . object_item
    (31) object_content -> . empty
    (32) object_item -> . key : basic_type
    (33) object_item -> . key : basic_expression
    (84) empty -> .
    (34) key -> . STRING_EXPLICIT
    (35) key -> . STRING_IMPLICIT

    }               reduce using rule 84 (empty -> .)
    STRING_EXPLICIT shift and go to state 99
    STRING_IMPLICIT shift and go to state 100

    object_item                    shift and go to state 96
    object_content                 shift and go to state 123
    empty                          shift and go to state 97
    key                            shift and go to state 98

state 116

    (32) object_item -> key : . basic_type
    (33) object_item -> key : . basic_expression
    (38) basic_type -> . INT
    (39) basic_type -> . FLOAT
    (40) basic_type -> . CHARACTER
    (41) basic_type -> . BOOLEAN
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    INT             shift and go to state 126
    FLOAT           shift and go to state 127
    CHARACTER       shift and go to state 128
    BOOLEAN         shift and go to state 129
    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25

    basic_type                     shift and go to state 124
    basic_expression               shift and go to state 125
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 117

    (77) function_call_list_nonempty -> basic_expression , function_call_list_nonempty .

    )               reduce using rule 77 (function_call_list_nonempty -> basic_expression , function_call_list_nonempty .)


state 118

    (80) object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .

    ;               reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    PLUS            reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    MINUS           reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    TIMES           reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    DIVIDE          reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    AND             reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    OR              reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    LT              reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    LE              reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    EQ              reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    GE              reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    GT              reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    )               reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    ,               reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    }               reduce using rule 80 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)


state 119

    (48) argument_list_nonempty -> STRING_IMPLICIT : . type , argument_list_nonempty
    (49) argument_list_nonempty -> STRING_IMPLICIT : . type
    (36) type -> . basic_type
    (37) type -> . STRING_IMPLICIT
    (38) basic_type -> . INT
    (39) basic_type -> . FLOAT
    (40) basic_type -> . CHARACTER
    (41) basic_type -> . BOOLEAN

    STRING_IMPLICIT shift and go to state 130
    INT             shift and go to state 126
    FLOAT           shift and go to state 127
    CHARACTER       shift and go to state 128
    BOOLEAN         shift and go to state 129

    type                           shift and go to state 131
    basic_type                     shift and go to state 132

state 120

    (45) function -> FUNCTION STRING_IMPLICIT ( argument_list ) . : type { block_body RETURN expression ; }

    :               shift and go to state 133


state 121

    (42) if_conditional -> IF ( basic_expression ) { . block_body_nonempty }
    (43) if_conditional -> IF ( basic_expression ) { . block_body_nonempty } ELSE { block_body_nonempty }
    (14) block_body_nonempty -> . statement block_body_nonempty
    (15) block_body_nonempty -> . simple_block block_body_nonempty
    (16) block_body_nonempty -> . statement
    (17) block_body_nonempty -> . simple_block
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . basic_expression ;
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (18) declaration -> . LET declaration_content
    (23) assignment -> . declaration ASSIGN expression
    (24) assignment -> . STRING_IMPLICIT ASSIGN expression
    (27) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (42) if_conditional -> . IF ( basic_expression ) { block_body_nonempty }
    (43) if_conditional -> . IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty }
    (44) while_loop -> . WHILE ( basic_expression ) { block_body_nonempty }
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    basic_expression               shift and go to state 8
    block_body_nonempty            shift and go to state 134
    statement                      shift and go to state 135
    simple_block                   shift and go to state 136
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    if_conditional                 shift and go to state 26
    while_loop                     shift and go to state 27
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 122

    (44) while_loop -> WHILE ( basic_expression ) { . block_body_nonempty }
    (14) block_body_nonempty -> . statement block_body_nonempty
    (15) block_body_nonempty -> . simple_block block_body_nonempty
    (16) block_body_nonempty -> . statement
    (17) block_body_nonempty -> . simple_block
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . basic_expression ;
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (18) declaration -> . LET declaration_content
    (23) assignment -> . declaration ASSIGN expression
    (24) assignment -> . STRING_IMPLICIT ASSIGN expression
    (27) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (42) if_conditional -> . IF ( basic_expression ) { block_body_nonempty }
    (43) if_conditional -> . IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty }
    (44) while_loop -> . WHILE ( basic_expression ) { block_body_nonempty }
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    basic_expression               shift and go to state 8
    block_body_nonempty            shift and go to state 137
    statement                      shift and go to state 135
    simple_block                   shift and go to state 136
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    if_conditional                 shift and go to state 26
    while_loop                     shift and go to state 27
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 123

    (29) object_content -> object_item , object_content .

    }               reduce using rule 29 (object_content -> object_item , object_content .)


state 124

    (32) object_item -> key : basic_type .

    ,               reduce using rule 32 (object_item -> key : basic_type .)
    }               reduce using rule 32 (object_item -> key : basic_type .)


state 125

    (33) object_item -> key : basic_expression .
    (63) basic_expression -> basic_expression . PLUS basic_expression
    (64) basic_expression -> basic_expression . MINUS basic_expression
    (65) basic_expression -> basic_expression . TIMES basic_expression
    (66) basic_expression -> basic_expression . DIVIDE basic_expression
    (67) basic_expression -> basic_expression . AND basic_expression
    (68) basic_expression -> basic_expression . OR basic_expression
    (69) basic_expression -> basic_expression . LT basic_expression
    (70) basic_expression -> basic_expression . LE basic_expression
    (71) basic_expression -> basic_expression . EQ basic_expression
    (72) basic_expression -> basic_expression . GE basic_expression
    (73) basic_expression -> basic_expression . GT basic_expression

    ,               reduce using rule 33 (object_item -> key : basic_expression .)
    }               reduce using rule 33 (object_item -> key : basic_expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    AND             shift and go to state 42
    OR              shift and go to state 43
    LT              shift and go to state 44
    LE              shift and go to state 45
    EQ              shift and go to state 46
    GE              shift and go to state 47
    GT              shift and go to state 48


state 126

    (38) basic_type -> INT .

    ,               reduce using rule 38 (basic_type -> INT .)
    }               reduce using rule 38 (basic_type -> INT .)
    )               reduce using rule 38 (basic_type -> INT .)
    {               reduce using rule 38 (basic_type -> INT .)


state 127

    (39) basic_type -> FLOAT .

    ,               reduce using rule 39 (basic_type -> FLOAT .)
    }               reduce using rule 39 (basic_type -> FLOAT .)
    )               reduce using rule 39 (basic_type -> FLOAT .)
    {               reduce using rule 39 (basic_type -> FLOAT .)


state 128

    (40) basic_type -> CHARACTER .

    ,               reduce using rule 40 (basic_type -> CHARACTER .)
    }               reduce using rule 40 (basic_type -> CHARACTER .)
    )               reduce using rule 40 (basic_type -> CHARACTER .)
    {               reduce using rule 40 (basic_type -> CHARACTER .)


state 129

    (41) basic_type -> BOOLEAN .

    ,               reduce using rule 41 (basic_type -> BOOLEAN .)
    }               reduce using rule 41 (basic_type -> BOOLEAN .)
    )               reduce using rule 41 (basic_type -> BOOLEAN .)
    {               reduce using rule 41 (basic_type -> BOOLEAN .)


state 130

    (37) type -> STRING_IMPLICIT .

    ,               reduce using rule 37 (type -> STRING_IMPLICIT .)
    )               reduce using rule 37 (type -> STRING_IMPLICIT .)
    {               reduce using rule 37 (type -> STRING_IMPLICIT .)


state 131

    (48) argument_list_nonempty -> STRING_IMPLICIT : type . , argument_list_nonempty
    (49) argument_list_nonempty -> STRING_IMPLICIT : type .

    ,               shift and go to state 138
    )               reduce using rule 49 (argument_list_nonempty -> STRING_IMPLICIT : type .)


state 132

    (36) type -> basic_type .

    ,               reduce using rule 36 (type -> basic_type .)
    )               reduce using rule 36 (type -> basic_type .)
    {               reduce using rule 36 (type -> basic_type .)


state 133

    (45) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : . type { block_body RETURN expression ; }
    (36) type -> . basic_type
    (37) type -> . STRING_IMPLICIT
    (38) basic_type -> . INT
    (39) basic_type -> . FLOAT
    (40) basic_type -> . CHARACTER
    (41) basic_type -> . BOOLEAN

    STRING_IMPLICIT shift and go to state 130
    INT             shift and go to state 126
    FLOAT           shift and go to state 127
    CHARACTER       shift and go to state 128
    BOOLEAN         shift and go to state 129

    type                           shift and go to state 139
    basic_type                     shift and go to state 132

state 134

    (42) if_conditional -> IF ( basic_expression ) { block_body_nonempty . }
    (43) if_conditional -> IF ( basic_expression ) { block_body_nonempty . } ELSE { block_body_nonempty }

    }               shift and go to state 140


state 135

    (14) block_body_nonempty -> statement . block_body_nonempty
    (16) block_body_nonempty -> statement .
    (14) block_body_nonempty -> . statement block_body_nonempty
    (15) block_body_nonempty -> . simple_block block_body_nonempty
    (16) block_body_nonempty -> . statement
    (17) block_body_nonempty -> . simple_block
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . basic_expression ;
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (18) declaration -> . LET declaration_content
    (23) assignment -> . declaration ASSIGN expression
    (24) assignment -> . STRING_IMPLICIT ASSIGN expression
    (27) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (42) if_conditional -> . IF ( basic_expression ) { block_body_nonempty }
    (43) if_conditional -> . IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty }
    (44) while_loop -> . WHILE ( basic_expression ) { block_body_nonempty }
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    }               reduce using rule 16 (block_body_nonempty -> statement .)
    RETURN          reduce using rule 16 (block_body_nonempty -> statement .)
    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    statement                      shift and go to state 135
    block_body_nonempty            shift and go to state 141
    simple_block                   shift and go to state 136
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    basic_expression               shift and go to state 8
    if_conditional                 shift and go to state 26
    while_loop                     shift and go to state 27
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 136

    (15) block_body_nonempty -> simple_block . block_body_nonempty
    (17) block_body_nonempty -> simple_block .
    (14) block_body_nonempty -> . statement block_body_nonempty
    (15) block_body_nonempty -> . simple_block block_body_nonempty
    (16) block_body_nonempty -> . statement
    (17) block_body_nonempty -> . simple_block
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . basic_expression ;
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (18) declaration -> . LET declaration_content
    (23) assignment -> . declaration ASSIGN expression
    (24) assignment -> . STRING_IMPLICIT ASSIGN expression
    (27) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (42) if_conditional -> . IF ( basic_expression ) { block_body_nonempty }
    (43) if_conditional -> . IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty }
    (44) while_loop -> . WHILE ( basic_expression ) { block_body_nonempty }
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    }               reduce using rule 17 (block_body_nonempty -> simple_block .)
    RETURN          reduce using rule 17 (block_body_nonempty -> simple_block .)
    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    simple_block                   shift and go to state 136
    block_body_nonempty            shift and go to state 142
    statement                      shift and go to state 135
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    basic_expression               shift and go to state 8
    if_conditional                 shift and go to state 26
    while_loop                     shift and go to state 27
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 137

    (44) while_loop -> WHILE ( basic_expression ) { block_body_nonempty . }

    }               shift and go to state 143


state 138

    (48) argument_list_nonempty -> STRING_IMPLICIT : type , . argument_list_nonempty
    (48) argument_list_nonempty -> . STRING_IMPLICIT : type , argument_list_nonempty
    (49) argument_list_nonempty -> . STRING_IMPLICIT : type

    STRING_IMPLICIT shift and go to state 108

    argument_list_nonempty         shift and go to state 144

state 139

    (45) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type . { block_body RETURN expression ; }

    {               shift and go to state 145


state 140

    (42) if_conditional -> IF ( basic_expression ) { block_body_nonempty } .
    (43) if_conditional -> IF ( basic_expression ) { block_body_nonempty } . ELSE { block_body_nonempty }

    LET             reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    STRING_IMPLICIT reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    TYPE            reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    (               reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    INTEGER         reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    REAL            reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    CHAR            reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    TR              reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    FL              reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    NULL            reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    PLUS            reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    MINUS           reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    NOT             reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    FUNCTION        reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    IF              reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    WHILE           reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    $end            reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    }               reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    RETURN          reduce using rule 42 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } .)
    ELSE            shift and go to state 146


state 141

    (14) block_body_nonempty -> statement block_body_nonempty .

    }               reduce using rule 14 (block_body_nonempty -> statement block_body_nonempty .)
    RETURN          reduce using rule 14 (block_body_nonempty -> statement block_body_nonempty .)


state 142

    (15) block_body_nonempty -> simple_block block_body_nonempty .

    }               reduce using rule 15 (block_body_nonempty -> simple_block block_body_nonempty .)
    RETURN          reduce using rule 15 (block_body_nonempty -> simple_block block_body_nonempty .)


state 143

    (44) while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .

    LET             reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    STRING_IMPLICIT reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    TYPE            reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    (               reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    INTEGER         reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    REAL            reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    CHAR            reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    TR              reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    FL              reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    NULL            reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    PLUS            reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    MINUS           reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    NOT             reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    FUNCTION        reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    IF              reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    WHILE           reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    $end            reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    }               reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)
    RETURN          reduce using rule 44 (while_loop -> WHILE ( basic_expression ) { block_body_nonempty } .)


state 144

    (48) argument_list_nonempty -> STRING_IMPLICIT : type , argument_list_nonempty .

    )               reduce using rule 48 (argument_list_nonempty -> STRING_IMPLICIT : type , argument_list_nonempty .)


state 145

    (45) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { . block_body RETURN expression ; }
    (12) block_body -> . block_body_nonempty
    (13) block_body -> . empty
    (14) block_body_nonempty -> . statement block_body_nonempty
    (15) block_body_nonempty -> . simple_block block_body_nonempty
    (16) block_body_nonempty -> . statement
    (17) block_body_nonempty -> . simple_block
    (84) empty -> .
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . basic_expression ;
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (18) declaration -> . LET declaration_content
    (23) assignment -> . declaration ASSIGN expression
    (24) assignment -> . STRING_IMPLICIT ASSIGN expression
    (27) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (42) if_conditional -> . IF ( basic_expression ) { block_body_nonempty }
    (43) if_conditional -> . IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty }
    (44) while_loop -> . WHILE ( basic_expression ) { block_body_nonempty }
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    RETURN          reduce using rule 84 (empty -> .)
    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    block_body                     shift and go to state 147
    block_body_nonempty            shift and go to state 148
    empty                          shift and go to state 149
    statement                      shift and go to state 135
    simple_block                   shift and go to state 136
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    basic_expression               shift and go to state 8
    if_conditional                 shift and go to state 26
    while_loop                     shift and go to state 27
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 146

    (43) if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE . { block_body_nonempty }

    {               shift and go to state 150


state 147

    (45) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body . RETURN expression ; }

    RETURN          shift and go to state 151


state 148

    (12) block_body -> block_body_nonempty .

    RETURN          reduce using rule 12 (block_body -> block_body_nonempty .)


state 149

    (13) block_body -> empty .

    RETURN          reduce using rule 13 (block_body -> empty .)


state 150

    (43) if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { . block_body_nonempty }
    (14) block_body_nonempty -> . statement block_body_nonempty
    (15) block_body_nonempty -> . simple_block block_body_nonempty
    (16) block_body_nonempty -> . statement
    (17) block_body_nonempty -> . simple_block
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . basic_expression ;
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (18) declaration -> . LET declaration_content
    (23) assignment -> . declaration ASSIGN expression
    (24) assignment -> . STRING_IMPLICIT ASSIGN expression
    (27) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (42) if_conditional -> . IF ( basic_expression ) { block_body_nonempty }
    (43) if_conditional -> . IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty }
    (44) while_loop -> . WHILE ( basic_expression ) { block_body_nonempty }
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    IF              shift and go to state 29
    WHILE           shift and go to state 30

    basic_expression               shift and go to state 8
    block_body_nonempty            shift and go to state 152
    statement                      shift and go to state 135
    simple_block                   shift and go to state 136
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    if_conditional                 shift and go to state 26
    while_loop                     shift and go to state 27
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 151

    (45) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN . expression ; }
    (25) expression -> . basic_expression
    (26) expression -> . object
    (50) basic_expression -> . ( basic_expression )
    (51) basic_expression -> . function_call
    (52) basic_expression -> . object_call
    (53) basic_expression -> . INTEGER
    (54) basic_expression -> . REAL
    (55) basic_expression -> . CHAR
    (56) basic_expression -> . TR
    (57) basic_expression -> . FL
    (58) basic_expression -> . NULL
    (59) basic_expression -> . STRING_IMPLICIT
    (60) basic_expression -> . PLUS basic_expression
    (61) basic_expression -> . MINUS basic_expression
    (62) basic_expression -> . NOT basic_expression
    (63) basic_expression -> . basic_expression PLUS basic_expression
    (64) basic_expression -> . basic_expression MINUS basic_expression
    (65) basic_expression -> . basic_expression TIMES basic_expression
    (66) basic_expression -> . basic_expression DIVIDE basic_expression
    (67) basic_expression -> . basic_expression AND basic_expression
    (68) basic_expression -> . basic_expression OR basic_expression
    (69) basic_expression -> . basic_expression LT basic_expression
    (70) basic_expression -> . basic_expression LE basic_expression
    (71) basic_expression -> . basic_expression EQ basic_expression
    (72) basic_expression -> . basic_expression GE basic_expression
    (73) basic_expression -> . basic_expression GT basic_expression
    (28) object -> . { object_content }
    (74) function_call -> . STRING_IMPLICIT ( function_call_list )
    (79) object_call -> . STRING_IMPLICIT object_attribute_list

    (               shift and go to state 14
    INTEGER         shift and go to state 17
    REAL            shift and go to state 18
    CHAR            shift and go to state 19
    TR              shift and go to state 20
    FL              shift and go to state 21
    NULL            shift and go to state 22
    STRING_IMPLICIT shift and go to state 59
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    NOT             shift and go to state 25
    {               shift and go to state 69

    expression                     shift and go to state 153
    basic_expression               shift and go to state 67
    object                         shift and go to state 68
    function_call                  shift and go to state 15
    object_call                    shift and go to state 16

state 152

    (43) if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty . }

    }               shift and go to state 154


state 153

    (45) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression . ; }

    ;               shift and go to state 155


state 154

    (43) if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .

    LET             reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    STRING_IMPLICIT reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    TYPE            reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    (               reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    INTEGER         reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    REAL            reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    CHAR            reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    TR              reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    FL              reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    NULL            reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    PLUS            reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    MINUS           reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    NOT             reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    FUNCTION        reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    IF              reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    WHILE           reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    $end            reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    }               reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)
    RETURN          reduce using rule 43 (if_conditional -> IF ( basic_expression ) { block_body_nonempty } ELSE { block_body_nonempty } .)


state 155

    (45) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; . }

    }               shift and go to state 156


state 156

    (45) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .

    LET             reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    STRING_IMPLICIT reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    TYPE            reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    (               reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    INTEGER         reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    REAL            reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    CHAR            reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    TR              reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    FL              reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    NULL            reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    PLUS            reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    MINUS           reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    NOT             reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    FUNCTION        reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    IF              reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    WHILE           reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    $end            reduce using rule 45 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)

