Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> file
Rule 1     file -> statement file
Rule 2     file -> block file
Rule 3     file -> empty
Rule 4     statement -> declaration ;
Rule 5     statement -> assignment ;
Rule 6     statement -> definition ;
Rule 7     statement -> expression ;
Rule 8     block -> simple_block
Rule 9     block -> function
Rule 10    simple_block -> if_conditional
Rule 11    simple_block -> while_loop
Rule 12    block_body -> statement block_body
Rule 13    block_body -> simple_block block_body
Rule 14    block_body -> statement
Rule 15    block_body -> simple_block
Rule 16    declaration -> LET declaration_content
Rule 17    declaration_content -> item , declaration_content
Rule 18    declaration_content -> item
Rule 19    item -> STRING_IMPLICIT : STRING_IMPLICIT
Rule 20    item -> STRING_IMPLICIT
Rule 21    assignment -> declaration ASSIGN expression
Rule 22    assignment -> STRING_IMPLICIT ASSIGN expression
Rule 23    definition -> TYPE STRING_IMPLICIT ASSIGN object
Rule 24    object -> { object_content }
Rule 25    object_content -> object_item , object_content
Rule 26    object_content -> object_item
Rule 27    object_content -> empty
Rule 28    object_item -> key : basic_type
Rule 29    object_item -> key : expression
Rule 30    key -> STRING_EXPLICIT
Rule 31    key -> STRING_IMPLICIT
Rule 32    type -> basic_type
Rule 33    type -> STRING_IMPLICIT
Rule 34    basic_type -> INT
Rule 35    basic_type -> FLOAT
Rule 36    basic_type -> CHARACTER
Rule 37    basic_type -> BOOLEAN
Rule 38    if_conditional -> IF ( expression ) { block_body }
Rule 39    if_conditional -> IF ( expression ) { block_body } ELSE { block_body }
Rule 40    while_loop -> WHILE ( expression ) { block_body }
Rule 41    function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; }
Rule 42    argument_list -> argument_list_nonempty
Rule 43    argument_list -> empty
Rule 44    argument_list_nonempty -> STRING_IMPLICIT : type , argument_list_nonempty
Rule 45    argument_list_nonempty -> STRING_IMPLICIT : type
Rule 46    expression -> ( expression )
Rule 47    expression -> expression PLUS expression
Rule 48    expression -> expression MINUS expression
Rule 49    expression -> expression TIMES expression
Rule 50    expression -> expression DIVIDE expression
Rule 51    expression -> expression AND expression
Rule 52    expression -> expression OR expression
Rule 53    expression -> expression LT expression
Rule 54    expression -> expression LE expression
Rule 55    expression -> expression EQ expression
Rule 56    expression -> expression GE expression
Rule 57    expression -> expression GT expression
Rule 58    expression -> PLUS expression
Rule 59    expression -> MINUS expression
Rule 60    expression -> NOT expression
Rule 61    expression -> INTEGER
Rule 62    expression -> REAL
Rule 63    expression -> CHAR
Rule 64    expression -> TR
Rule 65    expression -> FL
Rule 66    expression -> NULL
Rule 67    expression -> STRING_IMPLICIT
Rule 68    expression -> function_call
Rule 69    expression -> object_call
Rule 70    expression -> object
Rule 71    function_call -> STRING_IMPLICIT ( function_call_list )
Rule 72    function_call_list -> function_call_list_nonempty
Rule 73    function_call_list -> empty
Rule 74    function_call_list_nonempty -> expression , function_call_list_nonempty
Rule 75    function_call_list_nonempty -> expression
Rule 76    object_call -> STRING_IMPLICIT object_attribute_list
Rule 77    object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list
Rule 78    object_attribute_list -> . STRING_IMPLICIT object_attribute_list
Rule 79    object_attribute_list -> [ STRING_EXPLICIT ]
Rule 80    object_attribute_list -> . STRING_IMPLICIT
Rule 81    empty -> <empty>

Terminals, with rules where they appear

(                    : 38 39 40 41 46 71
)                    : 38 39 40 41 46 71
,                    : 17 25 44 74
.                    : 78 80
:                    : 19 28 29 41 44 45
;                    : 4 5 6 7 41
AND                  : 51
ASSIGN               : 21 22 23
BOOLEAN              : 37
CHAR                 : 63
CHARACTER            : 36
DIVIDE               : 50
ELSE                 : 39
EQ                   : 55
FL                   : 65
FLOAT                : 35
FUNCTION             : 41
GE                   : 56
GT                   : 57
IF                   : 38 39
INT                  : 34
INTEGER              : 61
LE                   : 54
LET                  : 16
LT                   : 53
MINUS                : 48 59
NOT                  : 60
NULL                 : 66
OR                   : 52
PLUS                 : 47 58
REAL                 : 62
RETURN               : 41
STRING_EXPLICIT      : 30 77 79
STRING_IMPLICIT      : 19 19 20 22 23 31 33 41 44 45 67 71 76 78 80
TIMES                : 49
TR                   : 64
TYPE                 : 23
WHILE                : 40
[                    : 77 79
]                    : 77 79
error                : 
{                    : 24 38 39 39 40 41
}                    : 24 38 39 39 40 41

Nonterminals, with rules where they appear

argument_list        : 41
argument_list_nonempty : 42 44
assignment           : 5
basic_type           : 28 32
block                : 2
block_body           : 12 13 38 39 39 40 41
declaration          : 4 21
declaration_content  : 16 17
definition           : 6
empty                : 3 27 43 73
expression           : 7 21 22 29 38 39 40 41 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 59 60 74 75
file                 : 1 2 0
function             : 9
function_call        : 68
function_call_list   : 71
function_call_list_nonempty : 72 74
if_conditional       : 10
item                 : 17 18
key                  : 28 29
object               : 23 70
object_attribute_list : 76 77 78
object_call          : 69
object_content       : 24 25
object_item          : 25 26
simple_block         : 8 13 15
statement            : 1 12 14
type                 : 41 44 45
while_loop           : 11

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . statement file
    (2) file -> . block file
    (3) file -> . empty
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . expression ;
    (8) block -> . simple_block
    (9) block -> . function
    (81) empty -> .
    (16) declaration -> . LET declaration_content
    (21) assignment -> . declaration ASSIGN expression
    (22) assignment -> . STRING_IMPLICIT ASSIGN expression
    (23) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (41) function -> . FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; }
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }
    (38) if_conditional -> . IF ( expression ) { block_body }
    (39) if_conditional -> . IF ( expression ) { block_body } ELSE { block_body }
    (40) while_loop -> . WHILE ( expression ) { block_body }

    $end            reduce using rule 81 (empty -> .)
    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    FUNCTION        shift and go to state 29
    {               shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32

    file                           shift and go to state 1
    statement                      shift and go to state 2
    block                          shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    expression                     shift and go to state 8
    simple_block                   shift and go to state 9
    function                       shift and go to state 10
    object                         shift and go to state 14
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    if_conditional                 shift and go to state 27
    while_loop                     shift and go to state 28

state 1

    (0) S' -> file .



state 2

    (1) file -> statement . file
    (1) file -> . statement file
    (2) file -> . block file
    (3) file -> . empty
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . expression ;
    (8) block -> . simple_block
    (9) block -> . function
    (81) empty -> .
    (16) declaration -> . LET declaration_content
    (21) assignment -> . declaration ASSIGN expression
    (22) assignment -> . STRING_IMPLICIT ASSIGN expression
    (23) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (41) function -> . FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; }
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }
    (38) if_conditional -> . IF ( expression ) { block_body }
    (39) if_conditional -> . IF ( expression ) { block_body } ELSE { block_body }
    (40) while_loop -> . WHILE ( expression ) { block_body }

    $end            reduce using rule 81 (empty -> .)
    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    FUNCTION        shift and go to state 29
    {               shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32

    statement                      shift and go to state 2
    file                           shift and go to state 33
    block                          shift and go to state 3
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    expression                     shift and go to state 8
    simple_block                   shift and go to state 9
    function                       shift and go to state 10
    object                         shift and go to state 14
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    if_conditional                 shift and go to state 27
    while_loop                     shift and go to state 28

state 3

    (2) file -> block . file
    (1) file -> . statement file
    (2) file -> . block file
    (3) file -> . empty
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . expression ;
    (8) block -> . simple_block
    (9) block -> . function
    (81) empty -> .
    (16) declaration -> . LET declaration_content
    (21) assignment -> . declaration ASSIGN expression
    (22) assignment -> . STRING_IMPLICIT ASSIGN expression
    (23) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (41) function -> . FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; }
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }
    (38) if_conditional -> . IF ( expression ) { block_body }
    (39) if_conditional -> . IF ( expression ) { block_body } ELSE { block_body }
    (40) while_loop -> . WHILE ( expression ) { block_body }

    $end            reduce using rule 81 (empty -> .)
    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    FUNCTION        shift and go to state 29
    {               shift and go to state 30
    IF              shift and go to state 31
    WHILE           shift and go to state 32

    block                          shift and go to state 3
    file                           shift and go to state 34
    statement                      shift and go to state 2
    empty                          shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    expression                     shift and go to state 8
    simple_block                   shift and go to state 9
    function                       shift and go to state 10
    object                         shift and go to state 14
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    if_conditional                 shift and go to state 27
    while_loop                     shift and go to state 28

state 4

    (3) file -> empty .

    $end            reduce using rule 3 (file -> empty .)


state 5

    (4) statement -> declaration . ;
    (21) assignment -> declaration . ASSIGN expression

    ;               shift and go to state 35
    ASSIGN          shift and go to state 36


state 6

    (5) statement -> assignment . ;

    ;               shift and go to state 37


state 7

    (6) statement -> definition . ;

    ;               shift and go to state 38


state 8

    (7) statement -> expression . ;
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               shift and go to state 39
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    EQ              shift and go to state 48
    GE              shift and go to state 49
    GT              shift and go to state 50


state 9

    (8) block -> simple_block .

    LET             reduce using rule 8 (block -> simple_block .)
    STRING_IMPLICIT reduce using rule 8 (block -> simple_block .)
    TYPE            reduce using rule 8 (block -> simple_block .)
    (               reduce using rule 8 (block -> simple_block .)
    PLUS            reduce using rule 8 (block -> simple_block .)
    MINUS           reduce using rule 8 (block -> simple_block .)
    NOT             reduce using rule 8 (block -> simple_block .)
    INTEGER         reduce using rule 8 (block -> simple_block .)
    REAL            reduce using rule 8 (block -> simple_block .)
    CHAR            reduce using rule 8 (block -> simple_block .)
    TR              reduce using rule 8 (block -> simple_block .)
    FL              reduce using rule 8 (block -> simple_block .)
    NULL            reduce using rule 8 (block -> simple_block .)
    FUNCTION        reduce using rule 8 (block -> simple_block .)
    {               reduce using rule 8 (block -> simple_block .)
    IF              reduce using rule 8 (block -> simple_block .)
    WHILE           reduce using rule 8 (block -> simple_block .)
    $end            reduce using rule 8 (block -> simple_block .)


state 10

    (9) block -> function .

    LET             reduce using rule 9 (block -> function .)
    STRING_IMPLICIT reduce using rule 9 (block -> function .)
    TYPE            reduce using rule 9 (block -> function .)
    (               reduce using rule 9 (block -> function .)
    PLUS            reduce using rule 9 (block -> function .)
    MINUS           reduce using rule 9 (block -> function .)
    NOT             reduce using rule 9 (block -> function .)
    INTEGER         reduce using rule 9 (block -> function .)
    REAL            reduce using rule 9 (block -> function .)
    CHAR            reduce using rule 9 (block -> function .)
    TR              reduce using rule 9 (block -> function .)
    FL              reduce using rule 9 (block -> function .)
    NULL            reduce using rule 9 (block -> function .)
    FUNCTION        reduce using rule 9 (block -> function .)
    {               reduce using rule 9 (block -> function .)
    IF              reduce using rule 9 (block -> function .)
    WHILE           reduce using rule 9 (block -> function .)
    $end            reduce using rule 9 (block -> function .)


state 11

    (16) declaration -> LET . declaration_content
    (17) declaration_content -> . item , declaration_content
    (18) declaration_content -> . item
    (19) item -> . STRING_IMPLICIT : STRING_IMPLICIT
    (20) item -> . STRING_IMPLICIT

    STRING_IMPLICIT shift and go to state 53

    declaration_content            shift and go to state 51
    item                           shift and go to state 52

state 12

    (22) assignment -> STRING_IMPLICIT . ASSIGN expression
    (67) expression -> STRING_IMPLICIT .
    (71) function_call -> STRING_IMPLICIT . ( function_call_list )
    (76) object_call -> STRING_IMPLICIT . object_attribute_list
    (77) object_attribute_list -> . [ STRING_EXPLICIT ] object_attribute_list
    (78) object_attribute_list -> . . STRING_IMPLICIT object_attribute_list
    (79) object_attribute_list -> . [ STRING_EXPLICIT ]
    (80) object_attribute_list -> . . STRING_IMPLICIT

    ASSIGN          shift and go to state 54
    ;               reduce using rule 67 (expression -> STRING_IMPLICIT .)
    PLUS            reduce using rule 67 (expression -> STRING_IMPLICIT .)
    MINUS           reduce using rule 67 (expression -> STRING_IMPLICIT .)
    TIMES           reduce using rule 67 (expression -> STRING_IMPLICIT .)
    DIVIDE          reduce using rule 67 (expression -> STRING_IMPLICIT .)
    AND             reduce using rule 67 (expression -> STRING_IMPLICIT .)
    OR              reduce using rule 67 (expression -> STRING_IMPLICIT .)
    LT              reduce using rule 67 (expression -> STRING_IMPLICIT .)
    LE              reduce using rule 67 (expression -> STRING_IMPLICIT .)
    EQ              reduce using rule 67 (expression -> STRING_IMPLICIT .)
    GE              reduce using rule 67 (expression -> STRING_IMPLICIT .)
    GT              reduce using rule 67 (expression -> STRING_IMPLICIT .)
    (               shift and go to state 55
    [               shift and go to state 57
    .               shift and go to state 58

    object_attribute_list          shift and go to state 56

state 13

    (23) definition -> TYPE . STRING_IMPLICIT ASSIGN object

    STRING_IMPLICIT shift and go to state 59


state 14

    (70) expression -> object .

    ;               reduce using rule 70 (expression -> object .)
    PLUS            reduce using rule 70 (expression -> object .)
    MINUS           reduce using rule 70 (expression -> object .)
    TIMES           reduce using rule 70 (expression -> object .)
    DIVIDE          reduce using rule 70 (expression -> object .)
    AND             reduce using rule 70 (expression -> object .)
    OR              reduce using rule 70 (expression -> object .)
    LT              reduce using rule 70 (expression -> object .)
    LE              reduce using rule 70 (expression -> object .)
    EQ              reduce using rule 70 (expression -> object .)
    GE              reduce using rule 70 (expression -> object .)
    GT              reduce using rule 70 (expression -> object .)
    )               reduce using rule 70 (expression -> object .)
    ,               reduce using rule 70 (expression -> object .)
    }               reduce using rule 70 (expression -> object .)


state 15

    (46) expression -> ( . expression )
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 60
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 16

    (58) expression -> PLUS . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 62
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 17

    (59) expression -> MINUS . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 63
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 18

    (60) expression -> NOT . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 64
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 19

    (61) expression -> INTEGER .

    ;               reduce using rule 61 (expression -> INTEGER .)
    PLUS            reduce using rule 61 (expression -> INTEGER .)
    MINUS           reduce using rule 61 (expression -> INTEGER .)
    TIMES           reduce using rule 61 (expression -> INTEGER .)
    DIVIDE          reduce using rule 61 (expression -> INTEGER .)
    AND             reduce using rule 61 (expression -> INTEGER .)
    OR              reduce using rule 61 (expression -> INTEGER .)
    LT              reduce using rule 61 (expression -> INTEGER .)
    LE              reduce using rule 61 (expression -> INTEGER .)
    EQ              reduce using rule 61 (expression -> INTEGER .)
    GE              reduce using rule 61 (expression -> INTEGER .)
    GT              reduce using rule 61 (expression -> INTEGER .)
    )               reduce using rule 61 (expression -> INTEGER .)
    ,               reduce using rule 61 (expression -> INTEGER .)
    }               reduce using rule 61 (expression -> INTEGER .)


state 20

    (62) expression -> REAL .

    ;               reduce using rule 62 (expression -> REAL .)
    PLUS            reduce using rule 62 (expression -> REAL .)
    MINUS           reduce using rule 62 (expression -> REAL .)
    TIMES           reduce using rule 62 (expression -> REAL .)
    DIVIDE          reduce using rule 62 (expression -> REAL .)
    AND             reduce using rule 62 (expression -> REAL .)
    OR              reduce using rule 62 (expression -> REAL .)
    LT              reduce using rule 62 (expression -> REAL .)
    LE              reduce using rule 62 (expression -> REAL .)
    EQ              reduce using rule 62 (expression -> REAL .)
    GE              reduce using rule 62 (expression -> REAL .)
    GT              reduce using rule 62 (expression -> REAL .)
    )               reduce using rule 62 (expression -> REAL .)
    ,               reduce using rule 62 (expression -> REAL .)
    }               reduce using rule 62 (expression -> REAL .)


state 21

    (63) expression -> CHAR .

    ;               reduce using rule 63 (expression -> CHAR .)
    PLUS            reduce using rule 63 (expression -> CHAR .)
    MINUS           reduce using rule 63 (expression -> CHAR .)
    TIMES           reduce using rule 63 (expression -> CHAR .)
    DIVIDE          reduce using rule 63 (expression -> CHAR .)
    AND             reduce using rule 63 (expression -> CHAR .)
    OR              reduce using rule 63 (expression -> CHAR .)
    LT              reduce using rule 63 (expression -> CHAR .)
    LE              reduce using rule 63 (expression -> CHAR .)
    EQ              reduce using rule 63 (expression -> CHAR .)
    GE              reduce using rule 63 (expression -> CHAR .)
    GT              reduce using rule 63 (expression -> CHAR .)
    )               reduce using rule 63 (expression -> CHAR .)
    ,               reduce using rule 63 (expression -> CHAR .)
    }               reduce using rule 63 (expression -> CHAR .)


state 22

    (64) expression -> TR .

    ;               reduce using rule 64 (expression -> TR .)
    PLUS            reduce using rule 64 (expression -> TR .)
    MINUS           reduce using rule 64 (expression -> TR .)
    TIMES           reduce using rule 64 (expression -> TR .)
    DIVIDE          reduce using rule 64 (expression -> TR .)
    AND             reduce using rule 64 (expression -> TR .)
    OR              reduce using rule 64 (expression -> TR .)
    LT              reduce using rule 64 (expression -> TR .)
    LE              reduce using rule 64 (expression -> TR .)
    EQ              reduce using rule 64 (expression -> TR .)
    GE              reduce using rule 64 (expression -> TR .)
    GT              reduce using rule 64 (expression -> TR .)
    )               reduce using rule 64 (expression -> TR .)
    ,               reduce using rule 64 (expression -> TR .)
    }               reduce using rule 64 (expression -> TR .)


state 23

    (65) expression -> FL .

    ;               reduce using rule 65 (expression -> FL .)
    PLUS            reduce using rule 65 (expression -> FL .)
    MINUS           reduce using rule 65 (expression -> FL .)
    TIMES           reduce using rule 65 (expression -> FL .)
    DIVIDE          reduce using rule 65 (expression -> FL .)
    AND             reduce using rule 65 (expression -> FL .)
    OR              reduce using rule 65 (expression -> FL .)
    LT              reduce using rule 65 (expression -> FL .)
    LE              reduce using rule 65 (expression -> FL .)
    EQ              reduce using rule 65 (expression -> FL .)
    GE              reduce using rule 65 (expression -> FL .)
    GT              reduce using rule 65 (expression -> FL .)
    )               reduce using rule 65 (expression -> FL .)
    ,               reduce using rule 65 (expression -> FL .)
    }               reduce using rule 65 (expression -> FL .)


state 24

    (66) expression -> NULL .

    ;               reduce using rule 66 (expression -> NULL .)
    PLUS            reduce using rule 66 (expression -> NULL .)
    MINUS           reduce using rule 66 (expression -> NULL .)
    TIMES           reduce using rule 66 (expression -> NULL .)
    DIVIDE          reduce using rule 66 (expression -> NULL .)
    AND             reduce using rule 66 (expression -> NULL .)
    OR              reduce using rule 66 (expression -> NULL .)
    LT              reduce using rule 66 (expression -> NULL .)
    LE              reduce using rule 66 (expression -> NULL .)
    EQ              reduce using rule 66 (expression -> NULL .)
    GE              reduce using rule 66 (expression -> NULL .)
    GT              reduce using rule 66 (expression -> NULL .)
    )               reduce using rule 66 (expression -> NULL .)
    ,               reduce using rule 66 (expression -> NULL .)
    }               reduce using rule 66 (expression -> NULL .)


state 25

    (68) expression -> function_call .

    ;               reduce using rule 68 (expression -> function_call .)
    PLUS            reduce using rule 68 (expression -> function_call .)
    MINUS           reduce using rule 68 (expression -> function_call .)
    TIMES           reduce using rule 68 (expression -> function_call .)
    DIVIDE          reduce using rule 68 (expression -> function_call .)
    AND             reduce using rule 68 (expression -> function_call .)
    OR              reduce using rule 68 (expression -> function_call .)
    LT              reduce using rule 68 (expression -> function_call .)
    LE              reduce using rule 68 (expression -> function_call .)
    EQ              reduce using rule 68 (expression -> function_call .)
    GE              reduce using rule 68 (expression -> function_call .)
    GT              reduce using rule 68 (expression -> function_call .)
    )               reduce using rule 68 (expression -> function_call .)
    ,               reduce using rule 68 (expression -> function_call .)
    }               reduce using rule 68 (expression -> function_call .)


state 26

    (69) expression -> object_call .

    ;               reduce using rule 69 (expression -> object_call .)
    PLUS            reduce using rule 69 (expression -> object_call .)
    MINUS           reduce using rule 69 (expression -> object_call .)
    TIMES           reduce using rule 69 (expression -> object_call .)
    DIVIDE          reduce using rule 69 (expression -> object_call .)
    AND             reduce using rule 69 (expression -> object_call .)
    OR              reduce using rule 69 (expression -> object_call .)
    LT              reduce using rule 69 (expression -> object_call .)
    LE              reduce using rule 69 (expression -> object_call .)
    EQ              reduce using rule 69 (expression -> object_call .)
    GE              reduce using rule 69 (expression -> object_call .)
    GT              reduce using rule 69 (expression -> object_call .)
    )               reduce using rule 69 (expression -> object_call .)
    ,               reduce using rule 69 (expression -> object_call .)
    }               reduce using rule 69 (expression -> object_call .)


state 27

    (10) simple_block -> if_conditional .

    LET             reduce using rule 10 (simple_block -> if_conditional .)
    STRING_IMPLICIT reduce using rule 10 (simple_block -> if_conditional .)
    TYPE            reduce using rule 10 (simple_block -> if_conditional .)
    (               reduce using rule 10 (simple_block -> if_conditional .)
    PLUS            reduce using rule 10 (simple_block -> if_conditional .)
    MINUS           reduce using rule 10 (simple_block -> if_conditional .)
    NOT             reduce using rule 10 (simple_block -> if_conditional .)
    INTEGER         reduce using rule 10 (simple_block -> if_conditional .)
    REAL            reduce using rule 10 (simple_block -> if_conditional .)
    CHAR            reduce using rule 10 (simple_block -> if_conditional .)
    TR              reduce using rule 10 (simple_block -> if_conditional .)
    FL              reduce using rule 10 (simple_block -> if_conditional .)
    NULL            reduce using rule 10 (simple_block -> if_conditional .)
    FUNCTION        reduce using rule 10 (simple_block -> if_conditional .)
    {               reduce using rule 10 (simple_block -> if_conditional .)
    IF              reduce using rule 10 (simple_block -> if_conditional .)
    WHILE           reduce using rule 10 (simple_block -> if_conditional .)
    $end            reduce using rule 10 (simple_block -> if_conditional .)
    }               reduce using rule 10 (simple_block -> if_conditional .)
    RETURN          reduce using rule 10 (simple_block -> if_conditional .)


state 28

    (11) simple_block -> while_loop .

    LET             reduce using rule 11 (simple_block -> while_loop .)
    STRING_IMPLICIT reduce using rule 11 (simple_block -> while_loop .)
    TYPE            reduce using rule 11 (simple_block -> while_loop .)
    (               reduce using rule 11 (simple_block -> while_loop .)
    PLUS            reduce using rule 11 (simple_block -> while_loop .)
    MINUS           reduce using rule 11 (simple_block -> while_loop .)
    NOT             reduce using rule 11 (simple_block -> while_loop .)
    INTEGER         reduce using rule 11 (simple_block -> while_loop .)
    REAL            reduce using rule 11 (simple_block -> while_loop .)
    CHAR            reduce using rule 11 (simple_block -> while_loop .)
    TR              reduce using rule 11 (simple_block -> while_loop .)
    FL              reduce using rule 11 (simple_block -> while_loop .)
    NULL            reduce using rule 11 (simple_block -> while_loop .)
    FUNCTION        reduce using rule 11 (simple_block -> while_loop .)
    {               reduce using rule 11 (simple_block -> while_loop .)
    IF              reduce using rule 11 (simple_block -> while_loop .)
    WHILE           reduce using rule 11 (simple_block -> while_loop .)
    $end            reduce using rule 11 (simple_block -> while_loop .)
    }               reduce using rule 11 (simple_block -> while_loop .)
    RETURN          reduce using rule 11 (simple_block -> while_loop .)


state 29

    (41) function -> FUNCTION . STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; }

    STRING_IMPLICIT shift and go to state 65


state 30

    (24) object -> { . object_content }
    (25) object_content -> . object_item , object_content
    (26) object_content -> . object_item
    (27) object_content -> . empty
    (28) object_item -> . key : basic_type
    (29) object_item -> . key : expression
    (81) empty -> .
    (30) key -> . STRING_EXPLICIT
    (31) key -> . STRING_IMPLICIT

    }               reduce using rule 81 (empty -> .)
    STRING_EXPLICIT shift and go to state 70
    STRING_IMPLICIT shift and go to state 71

    object_content                 shift and go to state 66
    object_item                    shift and go to state 67
    empty                          shift and go to state 68
    key                            shift and go to state 69

state 31

    (38) if_conditional -> IF . ( expression ) { block_body }
    (39) if_conditional -> IF . ( expression ) { block_body } ELSE { block_body }

    (               shift and go to state 72


state 32

    (40) while_loop -> WHILE . ( expression ) { block_body }

    (               shift and go to state 73


state 33

    (1) file -> statement file .

    $end            reduce using rule 1 (file -> statement file .)


state 34

    (2) file -> block file .

    $end            reduce using rule 2 (file -> block file .)


state 35

    (4) statement -> declaration ; .

    LET             reduce using rule 4 (statement -> declaration ; .)
    STRING_IMPLICIT reduce using rule 4 (statement -> declaration ; .)
    TYPE            reduce using rule 4 (statement -> declaration ; .)
    (               reduce using rule 4 (statement -> declaration ; .)
    PLUS            reduce using rule 4 (statement -> declaration ; .)
    MINUS           reduce using rule 4 (statement -> declaration ; .)
    NOT             reduce using rule 4 (statement -> declaration ; .)
    INTEGER         reduce using rule 4 (statement -> declaration ; .)
    REAL            reduce using rule 4 (statement -> declaration ; .)
    CHAR            reduce using rule 4 (statement -> declaration ; .)
    TR              reduce using rule 4 (statement -> declaration ; .)
    FL              reduce using rule 4 (statement -> declaration ; .)
    NULL            reduce using rule 4 (statement -> declaration ; .)
    FUNCTION        reduce using rule 4 (statement -> declaration ; .)
    {               reduce using rule 4 (statement -> declaration ; .)
    IF              reduce using rule 4 (statement -> declaration ; .)
    WHILE           reduce using rule 4 (statement -> declaration ; .)
    $end            reduce using rule 4 (statement -> declaration ; .)
    }               reduce using rule 4 (statement -> declaration ; .)
    RETURN          reduce using rule 4 (statement -> declaration ; .)


state 36

    (21) assignment -> declaration ASSIGN . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 74
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 37

    (5) statement -> assignment ; .

    LET             reduce using rule 5 (statement -> assignment ; .)
    STRING_IMPLICIT reduce using rule 5 (statement -> assignment ; .)
    TYPE            reduce using rule 5 (statement -> assignment ; .)
    (               reduce using rule 5 (statement -> assignment ; .)
    PLUS            reduce using rule 5 (statement -> assignment ; .)
    MINUS           reduce using rule 5 (statement -> assignment ; .)
    NOT             reduce using rule 5 (statement -> assignment ; .)
    INTEGER         reduce using rule 5 (statement -> assignment ; .)
    REAL            reduce using rule 5 (statement -> assignment ; .)
    CHAR            reduce using rule 5 (statement -> assignment ; .)
    TR              reduce using rule 5 (statement -> assignment ; .)
    FL              reduce using rule 5 (statement -> assignment ; .)
    NULL            reduce using rule 5 (statement -> assignment ; .)
    FUNCTION        reduce using rule 5 (statement -> assignment ; .)
    {               reduce using rule 5 (statement -> assignment ; .)
    IF              reduce using rule 5 (statement -> assignment ; .)
    WHILE           reduce using rule 5 (statement -> assignment ; .)
    $end            reduce using rule 5 (statement -> assignment ; .)
    }               reduce using rule 5 (statement -> assignment ; .)
    RETURN          reduce using rule 5 (statement -> assignment ; .)


state 38

    (6) statement -> definition ; .

    LET             reduce using rule 6 (statement -> definition ; .)
    STRING_IMPLICIT reduce using rule 6 (statement -> definition ; .)
    TYPE            reduce using rule 6 (statement -> definition ; .)
    (               reduce using rule 6 (statement -> definition ; .)
    PLUS            reduce using rule 6 (statement -> definition ; .)
    MINUS           reduce using rule 6 (statement -> definition ; .)
    NOT             reduce using rule 6 (statement -> definition ; .)
    INTEGER         reduce using rule 6 (statement -> definition ; .)
    REAL            reduce using rule 6 (statement -> definition ; .)
    CHAR            reduce using rule 6 (statement -> definition ; .)
    TR              reduce using rule 6 (statement -> definition ; .)
    FL              reduce using rule 6 (statement -> definition ; .)
    NULL            reduce using rule 6 (statement -> definition ; .)
    FUNCTION        reduce using rule 6 (statement -> definition ; .)
    {               reduce using rule 6 (statement -> definition ; .)
    IF              reduce using rule 6 (statement -> definition ; .)
    WHILE           reduce using rule 6 (statement -> definition ; .)
    $end            reduce using rule 6 (statement -> definition ; .)
    }               reduce using rule 6 (statement -> definition ; .)
    RETURN          reduce using rule 6 (statement -> definition ; .)


state 39

    (7) statement -> expression ; .

    LET             reduce using rule 7 (statement -> expression ; .)
    STRING_IMPLICIT reduce using rule 7 (statement -> expression ; .)
    TYPE            reduce using rule 7 (statement -> expression ; .)
    (               reduce using rule 7 (statement -> expression ; .)
    PLUS            reduce using rule 7 (statement -> expression ; .)
    MINUS           reduce using rule 7 (statement -> expression ; .)
    NOT             reduce using rule 7 (statement -> expression ; .)
    INTEGER         reduce using rule 7 (statement -> expression ; .)
    REAL            reduce using rule 7 (statement -> expression ; .)
    CHAR            reduce using rule 7 (statement -> expression ; .)
    TR              reduce using rule 7 (statement -> expression ; .)
    FL              reduce using rule 7 (statement -> expression ; .)
    NULL            reduce using rule 7 (statement -> expression ; .)
    FUNCTION        reduce using rule 7 (statement -> expression ; .)
    {               reduce using rule 7 (statement -> expression ; .)
    IF              reduce using rule 7 (statement -> expression ; .)
    WHILE           reduce using rule 7 (statement -> expression ; .)
    $end            reduce using rule 7 (statement -> expression ; .)
    }               reduce using rule 7 (statement -> expression ; .)
    RETURN          reduce using rule 7 (statement -> expression ; .)


state 40

    (47) expression -> expression PLUS . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 75
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 41

    (48) expression -> expression MINUS . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 76
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 42

    (49) expression -> expression TIMES . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 77
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 43

    (50) expression -> expression DIVIDE . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 78
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 44

    (51) expression -> expression AND . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 79
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 45

    (52) expression -> expression OR . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 80
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 46

    (53) expression -> expression LT . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 81
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 47

    (54) expression -> expression LE . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 82
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 48

    (55) expression -> expression EQ . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 83
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 49

    (56) expression -> expression GE . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 84
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 50

    (57) expression -> expression GT . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 85
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 51

    (16) declaration -> LET declaration_content .

    ;               reduce using rule 16 (declaration -> LET declaration_content .)
    ASSIGN          reduce using rule 16 (declaration -> LET declaration_content .)


state 52

    (17) declaration_content -> item . , declaration_content
    (18) declaration_content -> item .

    ,               shift and go to state 86
    ;               reduce using rule 18 (declaration_content -> item .)
    ASSIGN          reduce using rule 18 (declaration_content -> item .)


state 53

    (19) item -> STRING_IMPLICIT . : STRING_IMPLICIT
    (20) item -> STRING_IMPLICIT .

    :               shift and go to state 87
    ,               reduce using rule 20 (item -> STRING_IMPLICIT .)
    ;               reduce using rule 20 (item -> STRING_IMPLICIT .)
    ASSIGN          reduce using rule 20 (item -> STRING_IMPLICIT .)


state 54

    (22) assignment -> STRING_IMPLICIT ASSIGN . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 88
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 55

    (71) function_call -> STRING_IMPLICIT ( . function_call_list )
    (72) function_call_list -> . function_call_list_nonempty
    (73) function_call_list -> . empty
    (74) function_call_list_nonempty -> . expression , function_call_list_nonempty
    (75) function_call_list_nonempty -> . expression
    (81) empty -> .
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    )               reduce using rule 81 (empty -> .)
    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    function_call_list             shift and go to state 89
    function_call_list_nonempty    shift and go to state 90
    empty                          shift and go to state 91
    expression                     shift and go to state 92
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 56

    (76) object_call -> STRING_IMPLICIT object_attribute_list .

    ;               reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    PLUS            reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    MINUS           reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    TIMES           reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    DIVIDE          reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    AND             reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    OR              reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    LT              reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    LE              reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    EQ              reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    GE              reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    GT              reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    )               reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    ,               reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)
    }               reduce using rule 76 (object_call -> STRING_IMPLICIT object_attribute_list .)


state 57

    (77) object_attribute_list -> [ . STRING_EXPLICIT ] object_attribute_list
    (79) object_attribute_list -> [ . STRING_EXPLICIT ]

    STRING_EXPLICIT shift and go to state 93


state 58

    (78) object_attribute_list -> . . STRING_IMPLICIT object_attribute_list
    (80) object_attribute_list -> . . STRING_IMPLICIT

    STRING_IMPLICIT shift and go to state 94


state 59

    (23) definition -> TYPE STRING_IMPLICIT . ASSIGN object

    ASSIGN          shift and go to state 95


state 60

    (46) expression -> ( expression . )
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    )               shift and go to state 96
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    EQ              shift and go to state 48
    GE              shift and go to state 49
    GT              shift and go to state 50


state 61

    (67) expression -> STRING_IMPLICIT .
    (71) function_call -> STRING_IMPLICIT . ( function_call_list )
    (76) object_call -> STRING_IMPLICIT . object_attribute_list
    (77) object_attribute_list -> . [ STRING_EXPLICIT ] object_attribute_list
    (78) object_attribute_list -> . . STRING_IMPLICIT object_attribute_list
    (79) object_attribute_list -> . [ STRING_EXPLICIT ]
    (80) object_attribute_list -> . . STRING_IMPLICIT

    )               reduce using rule 67 (expression -> STRING_IMPLICIT .)
    PLUS            reduce using rule 67 (expression -> STRING_IMPLICIT .)
    MINUS           reduce using rule 67 (expression -> STRING_IMPLICIT .)
    TIMES           reduce using rule 67 (expression -> STRING_IMPLICIT .)
    DIVIDE          reduce using rule 67 (expression -> STRING_IMPLICIT .)
    AND             reduce using rule 67 (expression -> STRING_IMPLICIT .)
    OR              reduce using rule 67 (expression -> STRING_IMPLICIT .)
    LT              reduce using rule 67 (expression -> STRING_IMPLICIT .)
    LE              reduce using rule 67 (expression -> STRING_IMPLICIT .)
    EQ              reduce using rule 67 (expression -> STRING_IMPLICIT .)
    GE              reduce using rule 67 (expression -> STRING_IMPLICIT .)
    GT              reduce using rule 67 (expression -> STRING_IMPLICIT .)
    ;               reduce using rule 67 (expression -> STRING_IMPLICIT .)
    ,               reduce using rule 67 (expression -> STRING_IMPLICIT .)
    }               reduce using rule 67 (expression -> STRING_IMPLICIT .)
    (               shift and go to state 55
    [               shift and go to state 57
    .               shift and go to state 58

    object_attribute_list          shift and go to state 56

state 62

    (58) expression -> PLUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 58 (expression -> PLUS expression .)
    PLUS            reduce using rule 58 (expression -> PLUS expression .)
    MINUS           reduce using rule 58 (expression -> PLUS expression .)
    TIMES           reduce using rule 58 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 58 (expression -> PLUS expression .)
    AND             reduce using rule 58 (expression -> PLUS expression .)
    OR              reduce using rule 58 (expression -> PLUS expression .)
    LT              reduce using rule 58 (expression -> PLUS expression .)
    LE              reduce using rule 58 (expression -> PLUS expression .)
    EQ              reduce using rule 58 (expression -> PLUS expression .)
    GE              reduce using rule 58 (expression -> PLUS expression .)
    GT              reduce using rule 58 (expression -> PLUS expression .)
    )               reduce using rule 58 (expression -> PLUS expression .)
    ,               reduce using rule 58 (expression -> PLUS expression .)
    }               reduce using rule 58 (expression -> PLUS expression .)

  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! TIMES           [ shift and go to state 42 ]
  ! DIVIDE          [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]
  ! GT              [ shift and go to state 50 ]


state 63

    (59) expression -> MINUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 59 (expression -> MINUS expression .)
    PLUS            reduce using rule 59 (expression -> MINUS expression .)
    MINUS           reduce using rule 59 (expression -> MINUS expression .)
    TIMES           reduce using rule 59 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 59 (expression -> MINUS expression .)
    AND             reduce using rule 59 (expression -> MINUS expression .)
    OR              reduce using rule 59 (expression -> MINUS expression .)
    LT              reduce using rule 59 (expression -> MINUS expression .)
    LE              reduce using rule 59 (expression -> MINUS expression .)
    EQ              reduce using rule 59 (expression -> MINUS expression .)
    GE              reduce using rule 59 (expression -> MINUS expression .)
    GT              reduce using rule 59 (expression -> MINUS expression .)
    )               reduce using rule 59 (expression -> MINUS expression .)
    ,               reduce using rule 59 (expression -> MINUS expression .)
    }               reduce using rule 59 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! TIMES           [ shift and go to state 42 ]
  ! DIVIDE          [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]
  ! GT              [ shift and go to state 50 ]


state 64

    (60) expression -> NOT expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 60 (expression -> NOT expression .)
    PLUS            reduce using rule 60 (expression -> NOT expression .)
    MINUS           reduce using rule 60 (expression -> NOT expression .)
    TIMES           reduce using rule 60 (expression -> NOT expression .)
    DIVIDE          reduce using rule 60 (expression -> NOT expression .)
    AND             reduce using rule 60 (expression -> NOT expression .)
    OR              reduce using rule 60 (expression -> NOT expression .)
    LT              reduce using rule 60 (expression -> NOT expression .)
    LE              reduce using rule 60 (expression -> NOT expression .)
    EQ              reduce using rule 60 (expression -> NOT expression .)
    GE              reduce using rule 60 (expression -> NOT expression .)
    GT              reduce using rule 60 (expression -> NOT expression .)
    )               reduce using rule 60 (expression -> NOT expression .)
    ,               reduce using rule 60 (expression -> NOT expression .)
    }               reduce using rule 60 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! TIMES           [ shift and go to state 42 ]
  ! DIVIDE          [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]
  ! GT              [ shift and go to state 50 ]


state 65

    (41) function -> FUNCTION STRING_IMPLICIT . ( argument_list ) : type { block_body RETURN expression ; }

    (               shift and go to state 97


state 66

    (24) object -> { object_content . }

    }               shift and go to state 98


state 67

    (25) object_content -> object_item . , object_content
    (26) object_content -> object_item .

    ,               shift and go to state 99
    }               reduce using rule 26 (object_content -> object_item .)


state 68

    (27) object_content -> empty .

    }               reduce using rule 27 (object_content -> empty .)


state 69

    (28) object_item -> key . : basic_type
    (29) object_item -> key . : expression

    :               shift and go to state 100


state 70

    (30) key -> STRING_EXPLICIT .

    :               reduce using rule 30 (key -> STRING_EXPLICIT .)


state 71

    (31) key -> STRING_IMPLICIT .

    :               reduce using rule 31 (key -> STRING_IMPLICIT .)


state 72

    (38) if_conditional -> IF ( . expression ) { block_body }
    (39) if_conditional -> IF ( . expression ) { block_body } ELSE { block_body }
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 101
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 73

    (40) while_loop -> WHILE ( . expression ) { block_body }
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 102
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 74

    (21) assignment -> declaration ASSIGN expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 21 (assignment -> declaration ASSIGN expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    EQ              shift and go to state 48
    GE              shift and go to state 49
    GT              shift and go to state 50


state 75

    (47) expression -> expression PLUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 47 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 47 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 47 (expression -> expression PLUS expression .)
    AND             reduce using rule 47 (expression -> expression PLUS expression .)
    OR              reduce using rule 47 (expression -> expression PLUS expression .)
    LT              reduce using rule 47 (expression -> expression PLUS expression .)
    LE              reduce using rule 47 (expression -> expression PLUS expression .)
    EQ              reduce using rule 47 (expression -> expression PLUS expression .)
    GE              reduce using rule 47 (expression -> expression PLUS expression .)
    GT              reduce using rule 47 (expression -> expression PLUS expression .)
    )               reduce using rule 47 (expression -> expression PLUS expression .)
    ,               reduce using rule 47 (expression -> expression PLUS expression .)
    }               reduce using rule 47 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43

  ! TIMES           [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]
  ! GT              [ shift and go to state 50 ]


state 76

    (48) expression -> expression MINUS expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 48 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 48 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 48 (expression -> expression MINUS expression .)
    AND             reduce using rule 48 (expression -> expression MINUS expression .)
    OR              reduce using rule 48 (expression -> expression MINUS expression .)
    LT              reduce using rule 48 (expression -> expression MINUS expression .)
    LE              reduce using rule 48 (expression -> expression MINUS expression .)
    EQ              reduce using rule 48 (expression -> expression MINUS expression .)
    GE              reduce using rule 48 (expression -> expression MINUS expression .)
    GT              reduce using rule 48 (expression -> expression MINUS expression .)
    )               reduce using rule 48 (expression -> expression MINUS expression .)
    ,               reduce using rule 48 (expression -> expression MINUS expression .)
    }               reduce using rule 48 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43

  ! TIMES           [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]
  ! GT              [ shift and go to state 50 ]


state 77

    (49) expression -> expression TIMES expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 49 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 49 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 49 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 49 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 49 (expression -> expression TIMES expression .)
    AND             reduce using rule 49 (expression -> expression TIMES expression .)
    OR              reduce using rule 49 (expression -> expression TIMES expression .)
    LT              reduce using rule 49 (expression -> expression TIMES expression .)
    LE              reduce using rule 49 (expression -> expression TIMES expression .)
    EQ              reduce using rule 49 (expression -> expression TIMES expression .)
    GE              reduce using rule 49 (expression -> expression TIMES expression .)
    GT              reduce using rule 49 (expression -> expression TIMES expression .)
    )               reduce using rule 49 (expression -> expression TIMES expression .)
    ,               reduce using rule 49 (expression -> expression TIMES expression .)
    }               reduce using rule 49 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! TIMES           [ shift and go to state 42 ]
  ! DIVIDE          [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]
  ! GT              [ shift and go to state 50 ]


state 78

    (50) expression -> expression DIVIDE expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 50 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 50 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 50 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 50 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 50 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 50 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 50 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 50 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 50 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 50 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 50 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 50 (expression -> expression DIVIDE expression .)
    )               reduce using rule 50 (expression -> expression DIVIDE expression .)
    ,               reduce using rule 50 (expression -> expression DIVIDE expression .)
    }               reduce using rule 50 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]
  ! TIMES           [ shift and go to state 42 ]
  ! DIVIDE          [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]
  ! GT              [ shift and go to state 50 ]


state 79

    (51) expression -> expression AND expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 51 (expression -> expression AND expression .)
    AND             reduce using rule 51 (expression -> expression AND expression .)
    OR              reduce using rule 51 (expression -> expression AND expression .)
    )               reduce using rule 51 (expression -> expression AND expression .)
    ,               reduce using rule 51 (expression -> expression AND expression .)
    }               reduce using rule 51 (expression -> expression AND expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    LT              shift and go to state 46
    LE              shift and go to state 47
    EQ              shift and go to state 48
    GE              shift and go to state 49
    GT              shift and go to state 50

  ! PLUS            [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 51 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 80

    (52) expression -> expression OR expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 52 (expression -> expression OR expression .)
    AND             reduce using rule 52 (expression -> expression OR expression .)
    OR              reduce using rule 52 (expression -> expression OR expression .)
    )               reduce using rule 52 (expression -> expression OR expression .)
    ,               reduce using rule 52 (expression -> expression OR expression .)
    }               reduce using rule 52 (expression -> expression OR expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    LT              shift and go to state 46
    LE              shift and go to state 47
    EQ              shift and go to state 48
    GE              shift and go to state 49
    GT              shift and go to state 50

  ! PLUS            [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]


state 81

    (53) expression -> expression LT expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 53 (expression -> expression LT expression .)
    AND             reduce using rule 53 (expression -> expression LT expression .)
    OR              reduce using rule 53 (expression -> expression LT expression .)
    LT              reduce using rule 53 (expression -> expression LT expression .)
    LE              reduce using rule 53 (expression -> expression LT expression .)
    EQ              reduce using rule 53 (expression -> expression LT expression .)
    GE              reduce using rule 53 (expression -> expression LT expression .)
    GT              reduce using rule 53 (expression -> expression LT expression .)
    )               reduce using rule 53 (expression -> expression LT expression .)
    ,               reduce using rule 53 (expression -> expression LT expression .)
    }               reduce using rule 53 (expression -> expression LT expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43

  ! PLUS            [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]
  ! GT              [ shift and go to state 50 ]


state 82

    (54) expression -> expression LE expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 54 (expression -> expression LE expression .)
    AND             reduce using rule 54 (expression -> expression LE expression .)
    OR              reduce using rule 54 (expression -> expression LE expression .)
    LT              reduce using rule 54 (expression -> expression LE expression .)
    LE              reduce using rule 54 (expression -> expression LE expression .)
    EQ              reduce using rule 54 (expression -> expression LE expression .)
    GE              reduce using rule 54 (expression -> expression LE expression .)
    GT              reduce using rule 54 (expression -> expression LE expression .)
    )               reduce using rule 54 (expression -> expression LE expression .)
    ,               reduce using rule 54 (expression -> expression LE expression .)
    }               reduce using rule 54 (expression -> expression LE expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43

  ! PLUS            [ reduce using rule 54 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 54 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> expression LE expression .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]
  ! GT              [ shift and go to state 50 ]


state 83

    (55) expression -> expression EQ expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 55 (expression -> expression EQ expression .)
    AND             reduce using rule 55 (expression -> expression EQ expression .)
    OR              reduce using rule 55 (expression -> expression EQ expression .)
    LT              reduce using rule 55 (expression -> expression EQ expression .)
    LE              reduce using rule 55 (expression -> expression EQ expression .)
    EQ              reduce using rule 55 (expression -> expression EQ expression .)
    GE              reduce using rule 55 (expression -> expression EQ expression .)
    GT              reduce using rule 55 (expression -> expression EQ expression .)
    )               reduce using rule 55 (expression -> expression EQ expression .)
    ,               reduce using rule 55 (expression -> expression EQ expression .)
    }               reduce using rule 55 (expression -> expression EQ expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43

  ! PLUS            [ reduce using rule 55 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression EQ expression .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]
  ! GT              [ shift and go to state 50 ]


state 84

    (56) expression -> expression GE expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 56 (expression -> expression GE expression .)
    AND             reduce using rule 56 (expression -> expression GE expression .)
    OR              reduce using rule 56 (expression -> expression GE expression .)
    LT              reduce using rule 56 (expression -> expression GE expression .)
    LE              reduce using rule 56 (expression -> expression GE expression .)
    EQ              reduce using rule 56 (expression -> expression GE expression .)
    GE              reduce using rule 56 (expression -> expression GE expression .)
    GT              reduce using rule 56 (expression -> expression GE expression .)
    )               reduce using rule 56 (expression -> expression GE expression .)
    ,               reduce using rule 56 (expression -> expression GE expression .)
    }               reduce using rule 56 (expression -> expression GE expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43

  ! PLUS            [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]
  ! GT              [ shift and go to state 50 ]


state 85

    (57) expression -> expression GT expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 57 (expression -> expression GT expression .)
    AND             reduce using rule 57 (expression -> expression GT expression .)
    OR              reduce using rule 57 (expression -> expression GT expression .)
    LT              reduce using rule 57 (expression -> expression GT expression .)
    LE              reduce using rule 57 (expression -> expression GT expression .)
    EQ              reduce using rule 57 (expression -> expression GT expression .)
    GE              reduce using rule 57 (expression -> expression GT expression .)
    GT              reduce using rule 57 (expression -> expression GT expression .)
    )               reduce using rule 57 (expression -> expression GT expression .)
    ,               reduce using rule 57 (expression -> expression GT expression .)
    }               reduce using rule 57 (expression -> expression GT expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43

  ! PLUS            [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression GT expression .) ]
  ! AND             [ shift and go to state 44 ]
  ! OR              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]
  ! GT              [ shift and go to state 50 ]


state 86

    (17) declaration_content -> item , . declaration_content
    (17) declaration_content -> . item , declaration_content
    (18) declaration_content -> . item
    (19) item -> . STRING_IMPLICIT : STRING_IMPLICIT
    (20) item -> . STRING_IMPLICIT

    STRING_IMPLICIT shift and go to state 53

    item                           shift and go to state 52
    declaration_content            shift and go to state 103

state 87

    (19) item -> STRING_IMPLICIT : . STRING_IMPLICIT

    STRING_IMPLICIT shift and go to state 104


state 88

    (22) assignment -> STRING_IMPLICIT ASSIGN expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               reduce using rule 22 (assignment -> STRING_IMPLICIT ASSIGN expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    EQ              shift and go to state 48
    GE              shift and go to state 49
    GT              shift and go to state 50


state 89

    (71) function_call -> STRING_IMPLICIT ( function_call_list . )

    )               shift and go to state 105


state 90

    (72) function_call_list -> function_call_list_nonempty .

    )               reduce using rule 72 (function_call_list -> function_call_list_nonempty .)


state 91

    (73) function_call_list -> empty .

    )               reduce using rule 73 (function_call_list -> empty .)


state 92

    (74) function_call_list_nonempty -> expression . , function_call_list_nonempty
    (75) function_call_list_nonempty -> expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ,               shift and go to state 106
    )               reduce using rule 75 (function_call_list_nonempty -> expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    EQ              shift and go to state 48
    GE              shift and go to state 49
    GT              shift and go to state 50


state 93

    (77) object_attribute_list -> [ STRING_EXPLICIT . ] object_attribute_list
    (79) object_attribute_list -> [ STRING_EXPLICIT . ]

    ]               shift and go to state 107


state 94

    (78) object_attribute_list -> . STRING_IMPLICIT . object_attribute_list
    (80) object_attribute_list -> . STRING_IMPLICIT .
    (77) object_attribute_list -> . [ STRING_EXPLICIT ] object_attribute_list
    (78) object_attribute_list -> . . STRING_IMPLICIT object_attribute_list
    (79) object_attribute_list -> . [ STRING_EXPLICIT ]
    (80) object_attribute_list -> . . STRING_IMPLICIT

    ;               reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    PLUS            reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    MINUS           reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    TIMES           reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    DIVIDE          reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    AND             reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    OR              reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    LT              reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    LE              reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    EQ              reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    GE              reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    GT              reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    )               reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    ,               reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    }               reduce using rule 80 (object_attribute_list -> . STRING_IMPLICIT .)
    [               shift and go to state 57
    .               shift and go to state 58

    object_attribute_list          shift and go to state 108

state 95

    (23) definition -> TYPE STRING_IMPLICIT ASSIGN . object
    (24) object -> . { object_content }

    {               shift and go to state 30

    object                         shift and go to state 109

state 96

    (46) expression -> ( expression ) .

    ;               reduce using rule 46 (expression -> ( expression ) .)
    PLUS            reduce using rule 46 (expression -> ( expression ) .)
    MINUS           reduce using rule 46 (expression -> ( expression ) .)
    TIMES           reduce using rule 46 (expression -> ( expression ) .)
    DIVIDE          reduce using rule 46 (expression -> ( expression ) .)
    AND             reduce using rule 46 (expression -> ( expression ) .)
    OR              reduce using rule 46 (expression -> ( expression ) .)
    LT              reduce using rule 46 (expression -> ( expression ) .)
    LE              reduce using rule 46 (expression -> ( expression ) .)
    EQ              reduce using rule 46 (expression -> ( expression ) .)
    GE              reduce using rule 46 (expression -> ( expression ) .)
    GT              reduce using rule 46 (expression -> ( expression ) .)
    )               reduce using rule 46 (expression -> ( expression ) .)
    ,               reduce using rule 46 (expression -> ( expression ) .)
    }               reduce using rule 46 (expression -> ( expression ) .)


state 97

    (41) function -> FUNCTION STRING_IMPLICIT ( . argument_list ) : type { block_body RETURN expression ; }
    (42) argument_list -> . argument_list_nonempty
    (43) argument_list -> . empty
    (44) argument_list_nonempty -> . STRING_IMPLICIT : type , argument_list_nonempty
    (45) argument_list_nonempty -> . STRING_IMPLICIT : type
    (81) empty -> .

    STRING_IMPLICIT shift and go to state 110
    )               reduce using rule 81 (empty -> .)

    argument_list                  shift and go to state 111
    argument_list_nonempty         shift and go to state 112
    empty                          shift and go to state 113

state 98

    (24) object -> { object_content } .

    ;               reduce using rule 24 (object -> { object_content } .)
    PLUS            reduce using rule 24 (object -> { object_content } .)
    MINUS           reduce using rule 24 (object -> { object_content } .)
    TIMES           reduce using rule 24 (object -> { object_content } .)
    DIVIDE          reduce using rule 24 (object -> { object_content } .)
    AND             reduce using rule 24 (object -> { object_content } .)
    OR              reduce using rule 24 (object -> { object_content } .)
    LT              reduce using rule 24 (object -> { object_content } .)
    LE              reduce using rule 24 (object -> { object_content } .)
    EQ              reduce using rule 24 (object -> { object_content } .)
    GE              reduce using rule 24 (object -> { object_content } .)
    GT              reduce using rule 24 (object -> { object_content } .)
    )               reduce using rule 24 (object -> { object_content } .)
    ,               reduce using rule 24 (object -> { object_content } .)
    }               reduce using rule 24 (object -> { object_content } .)


state 99

    (25) object_content -> object_item , . object_content
    (25) object_content -> . object_item , object_content
    (26) object_content -> . object_item
    (27) object_content -> . empty
    (28) object_item -> . key : basic_type
    (29) object_item -> . key : expression
    (81) empty -> .
    (30) key -> . STRING_EXPLICIT
    (31) key -> . STRING_IMPLICIT

    }               reduce using rule 81 (empty -> .)
    STRING_EXPLICIT shift and go to state 70
    STRING_IMPLICIT shift and go to state 71

    object_item                    shift and go to state 67
    object_content                 shift and go to state 114
    empty                          shift and go to state 68
    key                            shift and go to state 69

state 100

    (28) object_item -> key : . basic_type
    (29) object_item -> key : . expression
    (34) basic_type -> . INT
    (35) basic_type -> . FLOAT
    (36) basic_type -> . CHARACTER
    (37) basic_type -> . BOOLEAN
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    INT             shift and go to state 117
    FLOAT           shift and go to state 118
    CHARACTER       shift and go to state 119
    BOOLEAN         shift and go to state 120
    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    basic_type                     shift and go to state 115
    expression                     shift and go to state 116
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 101

    (38) if_conditional -> IF ( expression . ) { block_body }
    (39) if_conditional -> IF ( expression . ) { block_body } ELSE { block_body }
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    )               shift and go to state 121
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    EQ              shift and go to state 48
    GE              shift and go to state 49
    GT              shift and go to state 50


state 102

    (40) while_loop -> WHILE ( expression . ) { block_body }
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    )               shift and go to state 122
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    EQ              shift and go to state 48
    GE              shift and go to state 49
    GT              shift and go to state 50


state 103

    (17) declaration_content -> item , declaration_content .

    ;               reduce using rule 17 (declaration_content -> item , declaration_content .)
    ASSIGN          reduce using rule 17 (declaration_content -> item , declaration_content .)


state 104

    (19) item -> STRING_IMPLICIT : STRING_IMPLICIT .

    ,               reduce using rule 19 (item -> STRING_IMPLICIT : STRING_IMPLICIT .)
    ;               reduce using rule 19 (item -> STRING_IMPLICIT : STRING_IMPLICIT .)
    ASSIGN          reduce using rule 19 (item -> STRING_IMPLICIT : STRING_IMPLICIT .)


state 105

    (71) function_call -> STRING_IMPLICIT ( function_call_list ) .

    ;               reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    PLUS            reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    MINUS           reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    TIMES           reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    DIVIDE          reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    AND             reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    OR              reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    LT              reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    LE              reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    EQ              reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    GE              reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    GT              reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    )               reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    ,               reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)
    }               reduce using rule 71 (function_call -> STRING_IMPLICIT ( function_call_list ) .)


state 106

    (74) function_call_list_nonempty -> expression , . function_call_list_nonempty
    (74) function_call_list_nonempty -> . expression , function_call_list_nonempty
    (75) function_call_list_nonempty -> . expression
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 92
    function_call_list_nonempty    shift and go to state 123
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 107

    (77) object_attribute_list -> [ STRING_EXPLICIT ] . object_attribute_list
    (79) object_attribute_list -> [ STRING_EXPLICIT ] .
    (77) object_attribute_list -> . [ STRING_EXPLICIT ] object_attribute_list
    (78) object_attribute_list -> . . STRING_IMPLICIT object_attribute_list
    (79) object_attribute_list -> . [ STRING_EXPLICIT ]
    (80) object_attribute_list -> . . STRING_IMPLICIT

    ;               reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    PLUS            reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    MINUS           reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    TIMES           reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    DIVIDE          reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    AND             reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    OR              reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    LT              reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    LE              reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    EQ              reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    GE              reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    GT              reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    )               reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    ,               reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    }               reduce using rule 79 (object_attribute_list -> [ STRING_EXPLICIT ] .)
    [               shift and go to state 57
    .               shift and go to state 58

    object_attribute_list          shift and go to state 124

state 108

    (78) object_attribute_list -> . STRING_IMPLICIT object_attribute_list .

    ;               reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    PLUS            reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    MINUS           reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    TIMES           reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    DIVIDE          reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    AND             reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    OR              reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    LT              reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    LE              reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    EQ              reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    GE              reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    GT              reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    )               reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    ,               reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)
    }               reduce using rule 78 (object_attribute_list -> . STRING_IMPLICIT object_attribute_list .)


state 109

    (23) definition -> TYPE STRING_IMPLICIT ASSIGN object .

    ;               reduce using rule 23 (definition -> TYPE STRING_IMPLICIT ASSIGN object .)


state 110

    (44) argument_list_nonempty -> STRING_IMPLICIT . : type , argument_list_nonempty
    (45) argument_list_nonempty -> STRING_IMPLICIT . : type

    :               shift and go to state 125


state 111

    (41) function -> FUNCTION STRING_IMPLICIT ( argument_list . ) : type { block_body RETURN expression ; }

    )               shift and go to state 126


state 112

    (42) argument_list -> argument_list_nonempty .

    )               reduce using rule 42 (argument_list -> argument_list_nonempty .)


state 113

    (43) argument_list -> empty .

    )               reduce using rule 43 (argument_list -> empty .)


state 114

    (25) object_content -> object_item , object_content .

    }               reduce using rule 25 (object_content -> object_item , object_content .)


state 115

    (28) object_item -> key : basic_type .

    ,               reduce using rule 28 (object_item -> key : basic_type .)
    }               reduce using rule 28 (object_item -> key : basic_type .)


state 116

    (29) object_item -> key : expression .
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ,               reduce using rule 29 (object_item -> key : expression .)
    }               reduce using rule 29 (object_item -> key : expression .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    EQ              shift and go to state 48
    GE              shift and go to state 49
    GT              shift and go to state 50


state 117

    (34) basic_type -> INT .

    ,               reduce using rule 34 (basic_type -> INT .)
    }               reduce using rule 34 (basic_type -> INT .)
    )               reduce using rule 34 (basic_type -> INT .)
    {               reduce using rule 34 (basic_type -> INT .)


state 118

    (35) basic_type -> FLOAT .

    ,               reduce using rule 35 (basic_type -> FLOAT .)
    }               reduce using rule 35 (basic_type -> FLOAT .)
    )               reduce using rule 35 (basic_type -> FLOAT .)
    {               reduce using rule 35 (basic_type -> FLOAT .)


state 119

    (36) basic_type -> CHARACTER .

    ,               reduce using rule 36 (basic_type -> CHARACTER .)
    }               reduce using rule 36 (basic_type -> CHARACTER .)
    )               reduce using rule 36 (basic_type -> CHARACTER .)
    {               reduce using rule 36 (basic_type -> CHARACTER .)


state 120

    (37) basic_type -> BOOLEAN .

    ,               reduce using rule 37 (basic_type -> BOOLEAN .)
    }               reduce using rule 37 (basic_type -> BOOLEAN .)
    )               reduce using rule 37 (basic_type -> BOOLEAN .)
    {               reduce using rule 37 (basic_type -> BOOLEAN .)


state 121

    (38) if_conditional -> IF ( expression ) . { block_body }
    (39) if_conditional -> IF ( expression ) . { block_body } ELSE { block_body }

    {               shift and go to state 127


state 122

    (40) while_loop -> WHILE ( expression ) . { block_body }

    {               shift and go to state 128


state 123

    (74) function_call_list_nonempty -> expression , function_call_list_nonempty .

    )               reduce using rule 74 (function_call_list_nonempty -> expression , function_call_list_nonempty .)


state 124

    (77) object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .

    ;               reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    PLUS            reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    MINUS           reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    TIMES           reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    DIVIDE          reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    AND             reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    OR              reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    LT              reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    LE              reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    EQ              reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    GE              reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    GT              reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    )               reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    ,               reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)
    }               reduce using rule 77 (object_attribute_list -> [ STRING_EXPLICIT ] object_attribute_list .)


state 125

    (44) argument_list_nonempty -> STRING_IMPLICIT : . type , argument_list_nonempty
    (45) argument_list_nonempty -> STRING_IMPLICIT : . type
    (32) type -> . basic_type
    (33) type -> . STRING_IMPLICIT
    (34) basic_type -> . INT
    (35) basic_type -> . FLOAT
    (36) basic_type -> . CHARACTER
    (37) basic_type -> . BOOLEAN

    STRING_IMPLICIT shift and go to state 129
    INT             shift and go to state 117
    FLOAT           shift and go to state 118
    CHARACTER       shift and go to state 119
    BOOLEAN         shift and go to state 120

    type                           shift and go to state 130
    basic_type                     shift and go to state 131

state 126

    (41) function -> FUNCTION STRING_IMPLICIT ( argument_list ) . : type { block_body RETURN expression ; }

    :               shift and go to state 132


state 127

    (38) if_conditional -> IF ( expression ) { . block_body }
    (39) if_conditional -> IF ( expression ) { . block_body } ELSE { block_body }
    (12) block_body -> . statement block_body
    (13) block_body -> . simple_block block_body
    (14) block_body -> . statement
    (15) block_body -> . simple_block
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . expression ;
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (16) declaration -> . LET declaration_content
    (21) assignment -> . declaration ASSIGN expression
    (22) assignment -> . STRING_IMPLICIT ASSIGN expression
    (23) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (38) if_conditional -> . IF ( expression ) { block_body }
    (39) if_conditional -> . IF ( expression ) { block_body } ELSE { block_body }
    (40) while_loop -> . WHILE ( expression ) { block_body }
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    {               shift and go to state 30

    expression                     shift and go to state 8
    block_body                     shift and go to state 133
    statement                      shift and go to state 134
    simple_block                   shift and go to state 135
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    if_conditional                 shift and go to state 27
    while_loop                     shift and go to state 28
    object                         shift and go to state 14
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26

state 128

    (40) while_loop -> WHILE ( expression ) { . block_body }
    (12) block_body -> . statement block_body
    (13) block_body -> . simple_block block_body
    (14) block_body -> . statement
    (15) block_body -> . simple_block
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . expression ;
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (16) declaration -> . LET declaration_content
    (21) assignment -> . declaration ASSIGN expression
    (22) assignment -> . STRING_IMPLICIT ASSIGN expression
    (23) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (38) if_conditional -> . IF ( expression ) { block_body }
    (39) if_conditional -> . IF ( expression ) { block_body } ELSE { block_body }
    (40) while_loop -> . WHILE ( expression ) { block_body }
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    {               shift and go to state 30

    expression                     shift and go to state 8
    block_body                     shift and go to state 136
    statement                      shift and go to state 134
    simple_block                   shift and go to state 135
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    if_conditional                 shift and go to state 27
    while_loop                     shift and go to state 28
    object                         shift and go to state 14
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26

state 129

    (33) type -> STRING_IMPLICIT .

    ,               reduce using rule 33 (type -> STRING_IMPLICIT .)
    )               reduce using rule 33 (type -> STRING_IMPLICIT .)
    {               reduce using rule 33 (type -> STRING_IMPLICIT .)


state 130

    (44) argument_list_nonempty -> STRING_IMPLICIT : type . , argument_list_nonempty
    (45) argument_list_nonempty -> STRING_IMPLICIT : type .

    ,               shift and go to state 137
    )               reduce using rule 45 (argument_list_nonempty -> STRING_IMPLICIT : type .)


state 131

    (32) type -> basic_type .

    ,               reduce using rule 32 (type -> basic_type .)
    )               reduce using rule 32 (type -> basic_type .)
    {               reduce using rule 32 (type -> basic_type .)


state 132

    (41) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : . type { block_body RETURN expression ; }
    (32) type -> . basic_type
    (33) type -> . STRING_IMPLICIT
    (34) basic_type -> . INT
    (35) basic_type -> . FLOAT
    (36) basic_type -> . CHARACTER
    (37) basic_type -> . BOOLEAN

    STRING_IMPLICIT shift and go to state 129
    INT             shift and go to state 117
    FLOAT           shift and go to state 118
    CHARACTER       shift and go to state 119
    BOOLEAN         shift and go to state 120

    type                           shift and go to state 138
    basic_type                     shift and go to state 131

state 133

    (38) if_conditional -> IF ( expression ) { block_body . }
    (39) if_conditional -> IF ( expression ) { block_body . } ELSE { block_body }

    }               shift and go to state 139


state 134

    (12) block_body -> statement . block_body
    (14) block_body -> statement .
    (12) block_body -> . statement block_body
    (13) block_body -> . simple_block block_body
    (14) block_body -> . statement
    (15) block_body -> . simple_block
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . expression ;
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (16) declaration -> . LET declaration_content
    (21) assignment -> . declaration ASSIGN expression
    (22) assignment -> . STRING_IMPLICIT ASSIGN expression
    (23) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (38) if_conditional -> . IF ( expression ) { block_body }
    (39) if_conditional -> . IF ( expression ) { block_body } ELSE { block_body }
    (40) while_loop -> . WHILE ( expression ) { block_body }
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    }               reduce using rule 14 (block_body -> statement .)
    RETURN          reduce using rule 14 (block_body -> statement .)
    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    {               shift and go to state 30

    statement                      shift and go to state 134
    block_body                     shift and go to state 140
    simple_block                   shift and go to state 135
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    expression                     shift and go to state 8
    if_conditional                 shift and go to state 27
    while_loop                     shift and go to state 28
    object                         shift and go to state 14
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26

state 135

    (13) block_body -> simple_block . block_body
    (15) block_body -> simple_block .
    (12) block_body -> . statement block_body
    (13) block_body -> . simple_block block_body
    (14) block_body -> . statement
    (15) block_body -> . simple_block
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . expression ;
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (16) declaration -> . LET declaration_content
    (21) assignment -> . declaration ASSIGN expression
    (22) assignment -> . STRING_IMPLICIT ASSIGN expression
    (23) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (38) if_conditional -> . IF ( expression ) { block_body }
    (39) if_conditional -> . IF ( expression ) { block_body } ELSE { block_body }
    (40) while_loop -> . WHILE ( expression ) { block_body }
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    }               reduce using rule 15 (block_body -> simple_block .)
    RETURN          reduce using rule 15 (block_body -> simple_block .)
    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    {               shift and go to state 30

    simple_block                   shift and go to state 135
    block_body                     shift and go to state 141
    statement                      shift and go to state 134
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    expression                     shift and go to state 8
    if_conditional                 shift and go to state 27
    while_loop                     shift and go to state 28
    object                         shift and go to state 14
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26

state 136

    (40) while_loop -> WHILE ( expression ) { block_body . }

    }               shift and go to state 142


state 137

    (44) argument_list_nonempty -> STRING_IMPLICIT : type , . argument_list_nonempty
    (44) argument_list_nonempty -> . STRING_IMPLICIT : type , argument_list_nonempty
    (45) argument_list_nonempty -> . STRING_IMPLICIT : type

    STRING_IMPLICIT shift and go to state 110

    argument_list_nonempty         shift and go to state 143

state 138

    (41) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type . { block_body RETURN expression ; }

    {               shift and go to state 144


state 139

    (38) if_conditional -> IF ( expression ) { block_body } .
    (39) if_conditional -> IF ( expression ) { block_body } . ELSE { block_body }

    LET             reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    STRING_IMPLICIT reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    TYPE            reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    (               reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    PLUS            reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    MINUS           reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    NOT             reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    INTEGER         reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    REAL            reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    CHAR            reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    TR              reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    FL              reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    NULL            reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    FUNCTION        reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    {               reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    IF              reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    WHILE           reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    $end            reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    }               reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    RETURN          reduce using rule 38 (if_conditional -> IF ( expression ) { block_body } .)
    ELSE            shift and go to state 145


state 140

    (12) block_body -> statement block_body .

    }               reduce using rule 12 (block_body -> statement block_body .)
    RETURN          reduce using rule 12 (block_body -> statement block_body .)


state 141

    (13) block_body -> simple_block block_body .

    }               reduce using rule 13 (block_body -> simple_block block_body .)
    RETURN          reduce using rule 13 (block_body -> simple_block block_body .)


state 142

    (40) while_loop -> WHILE ( expression ) { block_body } .

    LET             reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    STRING_IMPLICIT reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    TYPE            reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    (               reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    PLUS            reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    MINUS           reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    NOT             reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    INTEGER         reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    REAL            reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    CHAR            reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    TR              reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    FL              reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    NULL            reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    FUNCTION        reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    {               reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    IF              reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    WHILE           reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    $end            reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    }               reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)
    RETURN          reduce using rule 40 (while_loop -> WHILE ( expression ) { block_body } .)


state 143

    (44) argument_list_nonempty -> STRING_IMPLICIT : type , argument_list_nonempty .

    )               reduce using rule 44 (argument_list_nonempty -> STRING_IMPLICIT : type , argument_list_nonempty .)


state 144

    (41) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { . block_body RETURN expression ; }
    (12) block_body -> . statement block_body
    (13) block_body -> . simple_block block_body
    (14) block_body -> . statement
    (15) block_body -> . simple_block
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . expression ;
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (16) declaration -> . LET declaration_content
    (21) assignment -> . declaration ASSIGN expression
    (22) assignment -> . STRING_IMPLICIT ASSIGN expression
    (23) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (38) if_conditional -> . IF ( expression ) { block_body }
    (39) if_conditional -> . IF ( expression ) { block_body } ELSE { block_body }
    (40) while_loop -> . WHILE ( expression ) { block_body }
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    {               shift and go to state 30

    block_body                     shift and go to state 146
    expression                     shift and go to state 8
    statement                      shift and go to state 134
    simple_block                   shift and go to state 135
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    if_conditional                 shift and go to state 27
    while_loop                     shift and go to state 28
    object                         shift and go to state 14
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26

state 145

    (39) if_conditional -> IF ( expression ) { block_body } ELSE . { block_body }

    {               shift and go to state 147


state 146

    (41) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body . RETURN expression ; }

    RETURN          shift and go to state 148


state 147

    (39) if_conditional -> IF ( expression ) { block_body } ELSE { . block_body }
    (12) block_body -> . statement block_body
    (13) block_body -> . simple_block block_body
    (14) block_body -> . statement
    (15) block_body -> . simple_block
    (4) statement -> . declaration ;
    (5) statement -> . assignment ;
    (6) statement -> . definition ;
    (7) statement -> . expression ;
    (10) simple_block -> . if_conditional
    (11) simple_block -> . while_loop
    (16) declaration -> . LET declaration_content
    (21) assignment -> . declaration ASSIGN expression
    (22) assignment -> . STRING_IMPLICIT ASSIGN expression
    (23) definition -> . TYPE STRING_IMPLICIT ASSIGN object
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (38) if_conditional -> . IF ( expression ) { block_body }
    (39) if_conditional -> . IF ( expression ) { block_body } ELSE { block_body }
    (40) while_loop -> . WHILE ( expression ) { block_body }
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    LET             shift and go to state 11
    STRING_IMPLICIT shift and go to state 12
    TYPE            shift and go to state 13
    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    IF              shift and go to state 31
    WHILE           shift and go to state 32
    {               shift and go to state 30

    expression                     shift and go to state 8
    block_body                     shift and go to state 149
    statement                      shift and go to state 134
    simple_block                   shift and go to state 135
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    definition                     shift and go to state 7
    if_conditional                 shift and go to state 27
    while_loop                     shift and go to state 28
    object                         shift and go to state 14
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26

state 148

    (41) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN . expression ; }
    (46) expression -> . ( expression )
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression TIMES expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . expression AND expression
    (52) expression -> . expression OR expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression LE expression
    (55) expression -> . expression EQ expression
    (56) expression -> . expression GE expression
    (57) expression -> . expression GT expression
    (58) expression -> . PLUS expression
    (59) expression -> . MINUS expression
    (60) expression -> . NOT expression
    (61) expression -> . INTEGER
    (62) expression -> . REAL
    (63) expression -> . CHAR
    (64) expression -> . TR
    (65) expression -> . FL
    (66) expression -> . NULL
    (67) expression -> . STRING_IMPLICIT
    (68) expression -> . function_call
    (69) expression -> . object_call
    (70) expression -> . object
    (71) function_call -> . STRING_IMPLICIT ( function_call_list )
    (76) object_call -> . STRING_IMPLICIT object_attribute_list
    (24) object -> . { object_content }

    (               shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    NOT             shift and go to state 18
    INTEGER         shift and go to state 19
    REAL            shift and go to state 20
    CHAR            shift and go to state 21
    TR              shift and go to state 22
    FL              shift and go to state 23
    NULL            shift and go to state 24
    STRING_IMPLICIT shift and go to state 61
    {               shift and go to state 30

    expression                     shift and go to state 150
    function_call                  shift and go to state 25
    object_call                    shift and go to state 26
    object                         shift and go to state 14

state 149

    (39) if_conditional -> IF ( expression ) { block_body } ELSE { block_body . }

    }               shift and go to state 151


state 150

    (41) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression . ; }
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . TIMES expression
    (50) expression -> expression . DIVIDE expression
    (51) expression -> expression . AND expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . LE expression
    (55) expression -> expression . EQ expression
    (56) expression -> expression . GE expression
    (57) expression -> expression . GT expression

    ;               shift and go to state 152
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43
    AND             shift and go to state 44
    OR              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    EQ              shift and go to state 48
    GE              shift and go to state 49
    GT              shift and go to state 50


state 151

    (39) if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .

    LET             reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    STRING_IMPLICIT reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    TYPE            reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    (               reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    PLUS            reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    MINUS           reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    NOT             reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    INTEGER         reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    REAL            reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    CHAR            reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    TR              reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    FL              reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    NULL            reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    FUNCTION        reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    {               reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    IF              reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    WHILE           reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    $end            reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    }               reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)
    RETURN          reduce using rule 39 (if_conditional -> IF ( expression ) { block_body } ELSE { block_body } .)


state 152

    (41) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; . }

    }               shift and go to state 153


state 153

    (41) function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .

    LET             reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    STRING_IMPLICIT reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    TYPE            reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    (               reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    PLUS            reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    MINUS           reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    NOT             reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    INTEGER         reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    REAL            reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    CHAR            reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    TR              reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    FL              reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    NULL            reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    FUNCTION        reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    {               reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    IF              reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    WHILE           reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)
    $end            reduce using rule 41 (function -> FUNCTION STRING_IMPLICIT ( argument_list ) : type { block_body RETURN expression ; } .)

